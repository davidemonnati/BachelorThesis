PROCEDURE global LOGIC {
    # Prendo tutti gli oggetti che sono presenti all'interno del modello logico selezionato
    SET objects: ({})
    GET_OBJS_ID_ARRAY modelid: (modelid) objsIDArray: objsIDArray
    FOR i from:0 to:((objsIDArray.length)-1) {
        GET_ALL_OBJECTS_ATTRIBUTES objectID: (VAL objsIDArray[i]) objectArray: data
        SET dummy: (aappend(objects, data))
    }
    
    CREATE_RULECHAIN_MAP_REQUEST basename: (basename) reqbody: reqbody
    MAKE_POST_REQUEST path: ("api/ruleChain") reqHeader: (header) reqbody: (STR reqbody) mapRespBody: mapRespbody respstat: respstat # crea una nuova rulechain
    SAVE_RULECHAIN_TB_ID mapRespbody: (mapRespbody)
    SAVE_LOGIC objects: (objects) reqbody: reqbody # salva i nodi all'interno della rulechain che ho appena creato
    MAKE_POST_REQUEST path: ("api/ruleChain/metadata?updateRelated=true") reqHeader: (header) reqbody: (lam_toJson(reqbody)) mapRespBody: mapRespbody respstat: respstat
}

PROCEDURE global SAVE_LOGIC objects: array reqbody: reference {
    SETL nodes: ({})
    SETL connectors: ({})
    SETL index: 0
    FOR i from:0 to:((objects.length)-1) {
        IF(objects[i] SUB "object_class_type" = "data_stream_in") {
            CC "Core" GET_CLASS_ID classname:("service")
            SET serviceClassID: (classid)
            CC "Core" GET_CLASS_ID classname:("data_stream_in")
            SET dataStreamInClassID: (classid)
            CC "Core" GET_ATTR_ID classid:(dataStreamInClassID) attrname:("service") # leggo id attributo provaDevice
            CC "Core" GET_ATTR_VAL objid:(objects[i] SUB "adoxx_obj_id") attrid:(attrid)
            SET serviceName: ({})
            FOR name in:(val) {
                SET dummy: (aappend(serviceName, name))
            }
            CC "Core" GET_MODEL_ID modelname:(serviceName[3]) modeltype:("IoT Scenario")
            CC "Core" GET_OBJ_ID modelid:(modelid) classid:(serviceClassID) objname:(serviceName[0])
            UPDATE_DEVICE_PROFILE deviceProfileId: (objid)
        } ELSE {
            SET objid: (objects[i] SUB "adoxx_obj_id")
            SET tipoPSM: (objects[i] SUB "psm_type")
            SAVE_INDEX objid: (objid) classname: (objects[i] SUB "object_class_type") index: (STR index)
            GET_TB_TYPE adoxxType: (objects[i] SUB "object_class_type") tipoPSM: (tipoPSM) tbObjectType: tbObjectType
            SETL position: (objects[i] SUB "Position")
            LEO parse: (position) get-tmm-value:x_from_position:"x" get-tmm-value:y_from_position:"y" # Converto X e Y con CMS
            CREATE_REQUEST_NODE name: (objects[i] SUB "name") tbObjectType: (tbObjectType) layoutX: (CMS x_from_position) layoutY: (CMS y_from_position) nodo: nodo
            SET dummy: (aappend(nodes, nodo))



            CC "Core" GET_CONNECTORS objid:(objid) out
            GET_RECORD_VALUE objectid: (objid) attribute: ("index") val: fromIndex
            FOR connector in:(objids) {
                CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connector)
                GET_CONNECTORS_ATTRIBUTES id: (VAL connector) connAttr: connAttr
                GET_RECORD_VALUE objectid: (toobjid) attribute: ("index") val: toIndex
                SET attributi: (fromJson(STR connAttr))
                GET_CONNECTION fromIndex: (fromIndex) toIndex: (toIndex) label: (attributi SUB "output") type: (attributi SUB "psm_type") conn: conn
                SET dummy: (aappend(connectors, conn))
            }
            
            SETL index: (index+1)
        }
    }
    GET_RULECHAIN_TB_ID val: rulechainTbID
    CREATE_RULE_UPLOAD_REQUEST nodes: (nodes) rulechainID: (rulechainTbID) reqbody: reqbody
    SETL reqbody["connections"]: (connectors)
}

PROCEDURE global UPDATE_DEVICE_PROFILE deviceProfileId: integer {
    GET_RECORD_VALUE objectid: (objid) attribute: ("tb_object_id") val: deviceProfileTbId
    GET_ALL_OBJECTS_ATTRIBUTES objectID: (objid) objectArray: serviceData
    GET_RULECHAIN_TB_ID val: ruleChainTbId
    CREATE_UPDATE_REQUEST serviceData: (serviceData) deviceProfileTbId: (deviceProfileTbId) ruleChainTbId: (ruleChainTbId) body: reqbody
    MAKE_POST_REQUEST path: ("api/deviceProfile") reqHeader: (header) reqbody: (STR reqbody) mapRespBody: mapRespbody respstat: respstat
}

PROCEDURE global GET_CONNECTORS_ATTRIBUTES id: integer connAttr: reference {
    SET connAttr: (map())
        CC "Core" GET_CLASS_ID classname:("contains") # 10976
        GET_ATTRIBUTES_NAME_ARRAY classid: (classid) allattrnames: attributesName
        SETL connAttr["adoxx_obj_id"]: (id) # Salvo id oggetto adoxx sul json che contiene tutte le info dell'oggetto 
        FOR j from:0 to:((attributesName.length)-1) {
            CC "Core" GET_ATTR_VAL objid:(id) attrname:(attributesName[j]) 
            SETL connAttr[attributesName[j]]: (val) # Aggiunge tutti gli attributi all'interno dell'array device
        }
}

PROCEDURE global GET_RULECHAIN_TB_ID val: reference {
    GET_TB_ATTR_ID attrid: attrid
    CC "Core" GET_ATTR_VAL objid:(modelLogicID) attrid:(attrid)
}

PROCEDURE global SAVE_RULECHAIN_TB_ID mapRespbody: map {
    SETL dummy: (mapRespbody SUB "id")
    SETL id: (dummy SUB "id")
    GET_TB_ATTR_ID attrid: attrid
    CC "Core" SET_ATTR_VAL objid:(modelLogicID) attrid:(attrid) val:(id)
}

PROCEDURE global GET_TB_ATTR_ID attrid: reference {
    # Funzione che serve a ricavare l'id dell'attributo "Thingsboard id" nel modello logico, ho creato questa funzione per evitare la duplicazione del codice.
    CC "Core" GET_CLASS_ID classname:("__ModelTypeMetaData__") # ok
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("Thingsboard id") # 16436
}

PROCEDURE global SAVE_INDEX objid: integer classname: string index: string {
    CC "Core" GET_CLASS_ID classname:(classname)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData") # classid è il valore che ritorna GET_CLASS_ID
    EMPTY_TABLE attrid: (attrid) objid: (objid) # Elimino tutte le righe della tabella prima di inserire il nuovo id di thingsboard
    CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid) # attrid è il valore che ritorna GET_ATTR_ID clid è il valore che ritorna GET_CLASS_ID 
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("index") # rowid è il valore che ritorna ADD_REC_ROW
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(index) # rowid è il valore che ritorna ADD_REC_ROW
}

PROCEDURE global GET_TB_TYPE adoxxType: string tipoPSM: string tbObjectType: reference {
    CC "AdoScript" FREAD file:("db:\\thingsboard.json")
    SET convToJson: (fromJson(text))
    SET tbObjectType: ("")
    IF (tipoPSM != "") {
        SET obj: (convToJson SUB adoxxType)
        SET nodoPsm: (obj[0] SUB tipoPSM)
        SET config: (nodoPsm SUB "config")
        SET tbObjectType: (config SUB "type")
    } ELSE {
        SET obj: (convToJson SUB adoxxType)
        SET config: (obj SUB "config")
        SET tbObjectType: (config SUB "type")
    }
}


PROCEDURE global CREATE_REQUEST_NODE name: string tbObjectType: string layoutX: real layoutY: real nodo: reference {
    SETL nodo: (map())
    SETL additionalInfo: (map())

    SETL additionalInfo["description"]: "descrizione addizionale"
    SETL additionalInfo["layoutX"]: (layoutX*50)
    SETL additionalInfo["layoutY"]: (layoutY*50)

    SETL nodo["additionalInfo"]: (additionalInfo)
    SETL nodo["name"]: (name)
    SETL nodo["type"]: (tbObjectType)
}

PROCEDURE global GET_CONNECTION fromIndex: string toIndex: string label: string type: string conn: reference {
    SETL conn: (map())
    SETL conn["fromIndex"]: (fromIndex)
    SETL conn["toIndex"]: (toIndex)
    IF(type != "") {
        SETL conn["type"]: (type)
    } ELSE {
        SETL conn["type"]: (label)
    }
}

PROCEDURE global CREATE_RULE_UPLOAD_REQUEST nodes: array rulechainID: string reqbody: reference {
    SETL reqbody: (map())
    SETL entity: (map())

    SETL entity["id"]: (rulechainID)
    SETL entity["entityType"]: ("RULE_CHAIN")

    SETL reqbody["ruleChainId"]: (entity)
    SETL reqbody["firstNodeIndex"]: ("0")
    SETL reqbody["nodes"]: (nodes)
    SETL reqbody["name"]: ("logic")
    SETL reqbody["type"]: ("CORE")
}


PROCEDURE global CREATE_RULECHAIN_MAP_REQUEST basename: string reqbody: reference {
    SETL reqbody: (map())
    SETL reqbody["name"]: (basename)
    SETL reqbody["name"]: (basename)
}

PROCEDURE global CREATE_UPDATE_REQUEST serviceData: map deviceProfileTbId: string ruleChainTbId: string body: reference {
    SET body: (map())
    SET id: (map())
    SET defaultRuleChainId: (map())
    SET profileData: (map())
    SET transportConfiguration: (map())

    SET id["id"]: (deviceProfileTbId)
    SET id["entityType"]: ("DEVICE_PROFILE")

    SET defaultRuleChainId["id"]: (ruleChainTbId)
    SET defaultRuleChainId["entityType"]: ("RULE_CHAIN")

    SET transportConfiguration["type"]: ("DEFAULT")

    SET profileData["transportConfiguration"]: (transportConfiguration)

    SET body["id"]: (id)
    SET body["defaultRuleChainId"]: (defaultRuleChainId)
    SET body["name"]: (serviceData SUB "name")
    SET body["type"]: ("DEFAULT")
    SET body["transportType"]: (serviceData SUB "protocol")
    SET body["profileData"]: (profileData)
    SET body["description"]: (serviceData SUB "description")
}

