# All'interno di questo file sono contenute tutte le procedure che servono ad importare una rule chain da thingsboard ed associarla
# al service a cui fa riferimento.
# Durante la creazione del nuovo modello logico verrà salvato anche il token di autenticazione in modo che sarà possibile eseguire
# modifiche senza dover effettuare di nuovo il login.

PROCEDURE global IMPORT_RULE_CHAIN 
    auth: string # Token di autenticazione
    rulechainTbID: string # ID rule chain di Thingsboard da cui si vogliono prendere i nodi
    serviceID: integer # ID del service da associare all'attributo "service" del nodo data_stream_in
{
    GET_SPECIFICATIONS platform: ("ThingsBoard") specs: specifications

    # Creo un modello temporaneo di tipo IoT Logic PIM da convertire in PSM
    CC "Core" GET_MODELGROUP_ID mgroupname:("Models") sep:("~")
    CC "Core" CREATE_MODEL modeltype:("IoT Logic") modelname:("temp_logic") version:"" mgroups:(mgroupid)
    SET toDelete: (modelid)
    CC "Core" LOAD_MODEL modelid:(modelid)

    # Converto il modello temporaneo in PSM e successivamente elimino quello vecchio
    PIM_TO_PSM platform:("ThingsBoard") specs: (specifications) modelID: (toDelete) targetID: targetID
    CC "Core" DELETE_MODEL modelid:(toDelete)

    # Salvo il token auth nella variabile auth del nuovo modello PSM appena creato
    CC "Core" GET_CLASS_ID classname:("__ModelTypeMetaData__")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("auth")
    CC "Core" SET_ATTR_VAL objid:(targetID) attrid:(attrid) val:(replall(auth, "Bearer ", ""))

    # Salvo l'ID di thingsboard all'interno dell'attributo Thingsboard id del modello
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("Thingsboard id")
    CC "Core" SET_ATTR_VAL objid:(targetID) attrid:(attrid) val:(rulechainTbID)

    # Ricavo tutti i nodi presenti all'interno della rule chain
    GET_RC_NODES rulechainTbID:(rulechainTbID) specifications: (specifications) modelid: (targetID) serviceID: (serviceID)
    CC "Core" SAVE_MODEL modelid:(targetID) update-sys-attrs:1
    CC "Modeling" CLOSE modelid: (targetID) quiet close
}

# Procedura che prende tutti i nodi e attributi della rule chain e li inserisce all'interno del modello IoT Logic appena creato
PROCEDURE global GET_RC_NODES 
    rulechainTbID: string # ID della rule chain da cui si vogliono prendere i nodi
    specifications: map # JSON con le specifiche della piattaforma
    modelid: integer # ID del modello su cui si sta lavorando
    serviceID: integer # ID del service da associare all'attributo "service" del nodo data_stream_in
{
    # Creo il nodo data_stream_in
    CC "Core" GET_CLASS_ID classname:("data_stream_in")
    CC "Core" CREATE_OBJ modelid:(modelid) classid:(classid) objname:("Input")
    SET dataStreamID: (objid)
    CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:("Input")

    # Setto come valore dell'attributo service di tipo INTERREF il service a cui fa riferimento la rule chain che sto importando
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("service")
    CC "Core" ADD_INTERREF attrid: (attrid) tmodelid:(modelid) objid: (dataStreamID) tobjid: (serviceID)

    # Faccio una richiesta a thingsboard per prendere tutti i nodi che ci sono all'interno della rulechain con ID rulechainTbID
    MAKE_GET_REQUEST path: ("api/ruleChain/" + rulechainTbID + "/metadata") reqHeader: (header) respbodyToMap: response respstat: respstat
    SET connections: ((response SUB "connections")) #prendo l'array di tutti i collegamenti all'interno della risposta
    SET nodes: (response SUB "nodes") # prendo l'array di tutti i nodi all'interno della risposta
    FOR i from:0 to:((nodes.length)-1) {
        SEARCH_OBJ_TYPE specifications: (specifications) toSearch:(nodes[i] SUB "type") sObj: newObj sType: sType
        SET classname: (newObj)
        CC "Core" GET_CLASS_ID classname:(classname)
        CC "Core" CREATE_OBJ modelid:(modelid) classid:(classid) objname:(nodes[i] SUB "name")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(nodes[i] SUB "name")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:((nodes[i] SUB "additionalInfo") SUB "description")

        # Salvo index nella tabella platformData
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData")
        CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("index")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(i)

        SET_SPECIFICATIONS objID: (STR objid) specs: (specifications)

        # Aggiungo gli attributi dell'oggetto PSM nella tabella specification
        ADD_PSM_ATTRIBUTES specs: (specifications) type: (sType) objID: (objid)
    }

    # Creo le relazioni tra i vari nodi ed inserisco l'etichetta del collegamento nell'attributo output
    CC "Core" GET_CLASS_ID classname:("contains")
    SET containsRelationID: (classid)

    CC "Core" GET_ALL_OBJS modelid:(modelid)
    CONVERT_LIST_TOARRAY input: (objids) output: objsArray
    CC "Core" CREATE_CONNECTOR modelid:(modelid) fromobjid:(dataStreamID) toobjid:(VAL objsArray[1]) classid:(containsRelationID)

    FOR i from:0 to:((connections.length)-1) {
        SET tmpFrom: (connections[i] SUB "fromIndex")
        SET tmpTo: (connections[i] SUB "toIndex")
        SET fromIndex: (objsArray[tmpFrom + 1])
        SET toIndex: (objsArray[tmpTo + 1])
        CC "Core" CREATE_CONNECTOR modelid:(modelid) fromobjid:(VAL fromIndex) toobjid:(VAL toIndex) classid:(containsRelationID)
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("output") val:(connections[i] SUB "type")
    }
}

# La procedura SEARCH_OBJ_TYPE serve a cercare un'oggetto di thingsboard all'interno del JSON specifications e ritorna
# il corrispettivo nome utilizzato nella libreria X-IoT
PROCEDURE global SEARCH_OBJ_TYPE
    specifications: map # JSON con le specifiche della piattaforma
    toSearch: string # Nome dell'oggetto che si vuole cercare all'interno del file JSON
    sObj: reference # Ritorna il nome dell'oggetto che ha trovato (string)
    sType: reference # Ritorna il tipo dell'oggetto che ha trovato (string)
{
    SET sType: ("")
    SET sObj: ("")
    FOR obj in:(mapKeysList(specifications)) sep:("~") {
        IF(type(specifications SUB obj) = "array") {
            FOR type in:(mapKeysList((specifications SUB obj)[0])) sep:("~") {
                IF ((((specifications SUB obj)[0] SUB type SUB "config") SUB "type") = toSearch) {
                    SET sType: (type)
                    SET sObj: (obj)
                }
            }
        }
    }
}

# Procedura che prende gli attributi dell'oggetto PSM da inserire nella tabella specification
PROCEDURE global ADD_PSM_ATTRIBUTES
    specs: map  # JSON con le specifiche della piattaforma
    type: string # tipo dell'oggetto
    objID: integer # ID dell'oggetto su cui si devono inserire gli attributi
{
    # Add PSM attributes to object
    CC "Core" GET_CLASS_ID objid:(objID)
    CC "Core" GET_CLASS_NAME classid:(classid)
    CC "Core" SET_ATTR_VAL objid:(objID) attrname:"psm_type" val:(type)
    IF (type(specs[classname]) = "undefined") {
        EXIT
    }
    SET class:(specs[classname][0][type])
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")

    IF (attrid != -1 AND type(class["specs"]) = "map") {
        SET attrs:(mapKeysArray(class["specs"]))
        CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objID) attrid:(attrid)
        FOR r in:(rowids) {
            CC "Core" REMOVE_REC_ROW objid:(objID) attrid:(attrid) rowid:(VAL r)
        }
        FOR j from:0 to:(attrs.length-1) {
            # Add attribute to specification table
            SET attrClass:(class["specs"][attrs[j]])
            CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
            CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:(attrs[j])
            IF (type(attrClass) = "map") {
                CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:(attrClass["type"])
                CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:(attrClass["description"])
            }
            IF ((ecode)!=0) {
                CC "AdoScript" ERRORBOX ("Error adding a row to attribute \""+(attrs[j])+"\"")
                EXIT
            }
        }
    }
}

