#EXECUTE file:("D:\\Universita\\Tesi\\ADOxx\\Script\\auth.asc")

IMPORT_RULE_CHAIN

PROCEDURE global IMPORT_RULE_CHAIN {
    GET_SPECIFICATIONS platform: ("ThingsBoard") specs: specifications

    CC "Core" GET_MODELGROUP_ID mgroupname:("Models") sep:("~")
    CC "Core" CREATE_MODEL modeltype:("IoT Logic") modelname:("temp_logic") version:"" mgroups:(mgroupid)
    SET toDelete: (modelid)
    CC "Core" LOAD_MODEL modelid:(modelid)
    PIM_TO_PSM platform:("ThingsBoard") specs: (specifications) modelID: (toDelete) targetID: targetID
    CC "Core" DELETE_MODEL modelid:(toDelete)

    GET_RC_NODES rulechainTbId:("00134620-4b0b-11ed-a339-0708081d40ce") specifications: (specifications) modelid: (targetID) # Test con una singola rule chain già esistente
    CC "Core" SAVE_MODEL modelid:(targetID) update-sys-attrs:1
    CC "Modeling" CLOSE modelid: (targetID) quiet close
}

#Id rule chain 00134620-4b0b-11ed-a339-0708081d40ce

PROCEDURE global GET_RC_NODES rulechainTbId: string specifications: map modelid: integer {
    # Creazione nodo data_stream_in
    CC "Core" GET_CLASS_ID classname:("data_stream_in")
    CC "Core" CREATE_OBJ modelid:(modelid) classid:(classid) objname:("Input")
    SET dataStreamID: (objid)
    CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:("Input")

    MAKE_GET_REQUEST path: ("api/ruleChain/" + rulechainTbId + "/metadata") reqHeader: (header) respbodyToMap: response respstat: respstat
    SET connections: ((response SUB "connections"))
    SET nodes: (response SUB "nodes")
    FOR i from:0 to:((nodes.length)-1) {
        SEARCH_OBJ_TYPE specifications: (specifications) toSearch:(nodes[i] SUB "type") sObj: newObj sType: newType
        SET classname: (newObj)
        CC "Core" GET_CLASS_ID classname:(classname)
        CC "Core" CREATE_OBJ modelid:(modelid) classid:(classid) objname:(nodes[i] SUB "name")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(nodes[i] SUB "name")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:((nodes[i] SUB "additionalInfo") SUB "description")

        # Salvo index nella tabella platformData
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData")
        CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("index")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(i)
    }

    # Creo i collegamenti tra i vari nodi
    CC "Core" GET_CLASS_ID classname:("contains")
    SET containsRelationID: (classid)

    # Questa è una stringa che devo trasformare in array
    CC "Core" GET_ALL_OBJS modelid:(modelid) #objids
    CONVERT_LIST_TOARRAY input: (objids) output: objsArray
    CC "Core" CREATE_CONNECTOR modelid:(modelid) fromobjid:(dataStreamID) toobjid:(VAL objsArray[1]) classid:(containsRelationID)

    FOR i from:0 to:((connections.length)-1) {
        SET tmpFrom: (connections[i] SUB "fromIndex")
        SET tmpTo: (connections[i] SUB "toIndex")
        SET fromIndex: (objsArray[tmpFrom + 1])
        SET toIndex: (objsArray[tmpTo + 1])
        CC "Core" CREATE_CONNECTOR modelid:(modelid) fromobjid:(VAL fromIndex) toobjid:(VAL toIndex) classid:(containsRelationID)
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("output") val:(connections[i] SUB "type")
    }
}

PROCEDURE global SEARCH_OBJ_TYPE specifications: map toSearch: string sObj: reference sType: reference {
    SET sType: ("")
    SET sObj: ("")
    FOR obj in:(mapKeysList(specifications)) sep:("~") {
        IF(type(specifications SUB obj) = "array") {
            FOR type in:(mapKeysList((specifications SUB obj)[0])) sep:("~") {
                IF ((((specifications SUB obj)[0] SUB type SUB "config") SUB "type") = toSearch) {
                    SET sType: (type)
                    SET sObj: (obj)
                }
            }
        }
    }
}

PROCEDURE global CONVERT_LIST_TOARRAY input: string output: reference {
    SET output: ({})
    FOR element in:(input) {
        SET dummy: (aappend(output, element))
    }
}

