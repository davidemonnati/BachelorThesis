# Script che ha come responsabilità quella di caricare su Thingsboard tutti gli oggetti che sono presenti all'interno del modello Scenario.
# Un modello scenario può contenere i seguenti tipi di oggetto: System, Device, Attribute, Service e Widget.

# La procedura SCENARIO serve a raccogliere tutti gli elementi che ci sono all'interno del modello e in base al tipo, eseguire tutte
# le operazioni necessarie per caricarle su Thingsboard.
# L'ordine in cui vengono presi gli oggetti è il seguente: System, Service, Device e Widget.
# Per ogni oggetto è necessario raccogliere tutti gli attributi che verranno poi utilizzati per costruire il JSON da passare al server
# per effettuare le richieste.
# Successivamente si effettua la richiesta POST e il server ritornerà come messaggio di riposta l'id che verrà salvato all'interno della
# tabella platformData.
# Infine, creo la dashboard con i widget che ci sono nel modello.
PROCEDURE global SCENARIO {
    SET entities: ({})
    # Get all systems
    # In Thingsboard corrisponde ad Asset
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelScenarioID) classname:("system")
    SET allSystemsID: (objids)

    # Upload systems
    FOR system in:(allSystemsID) {
        GET_ALL_OBJECTS_ATTRIBUTES objectID: (VAL system) objectArray: systemJSON

        CREATE_ASSET_REQUEST_DATA assetData: (systemJSON) body: reqbody 
        MAKE_POST_REQUEST path: ("api/asset") reqHeader: (header) reqbody: (STR reqbody) mapRespBody: mapRespBody respstat: respstat
        SAVE_OBJECT_ID objid: (VAL system) classname: (systemJSON SUB "object_class_type") mapRespBody: (mapRespBody) id: systemTbId
        UPLOAD_ATTRIBUTES objectid: (VAL system) objectType: ("system")
    }

    # Get all Device Profile
    # In Thingsboard corrisponde a Device Profile
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelScenarioID) classname:("service")
    SET allServicesID: (objids)
    FOR service in:(allServicesID) {
        GET_ALL_OBJECTS_ATTRIBUTES objectID: (VAL service) objectArray: serviceJSON

        CREATE_DEVICE_PROFILE_REQUEST serviceData: (serviceJSON) data: reqbody
        MAKE_POST_REQUEST path: ("api/deviceProfile") reqHeader: (header) reqbody: (STR reqbody) mapRespBody: mapRespBody respstat: respstat
        SAVE_OBJECT_ID objid: (VAL service) classname: (serviceJSON SUB "object_class_type") mapRespBody: (mapRespBody) id: serviceTbId
        UPLOAD_ATTRIBUTES objectid: (VAL service) objectType: ("service")
    }

    # Get all devices
    # In Thingsboard corrisponde a Device
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelScenarioID) classname:("device")
    SET alldevicesID: (objids)
    FOR device in:(alldevicesID) {
        GET_ALL_OBJECTS_ATTRIBUTES objectID: (VAL device) objectArray: deviceJSON

        CREATE_DEVICE_REQUEST_DATA deviceData: (deviceJSON) body: reqbody
        CHECK_SERVICE deviceID: (VAL device) reqbody: (reqbody) updateReqbody: updateReqbody
        MAKE_POST_REQUEST path: ("api/device") reqHeader: (header) reqbody: (STR updateReqbody) mapRespBody: mapRespBody respstat: respstat
        SAVE_OBJECT_ID objid: (VAL device) classname: (deviceJSON SUB "object_class_type") mapRespBody: (mapRespBody) id: deviceTbId
        SET_DEVICE_TYPE objectid: (VAL device) value: (deviceJSON SUB "type") # set attribute type as SERVER_SCOPE
        UPLOAD_ATTRIBUTES objectid: (VAL device) objectType: ("device")
        CREATE_ENTITY_ALIAS aliasName: ((updateReqbody SUB "name") + "_alias") entityType: ("DEVICE") entityId: (deviceTbId) alias: alias
        SET dummy: (aappend(entities, alias))
    }
    CHECK_HASDEVICE_RELATION systemsArray: (allSystemsID) # Dopo aver caricato i dispositivi controllo quali sono le relazioni system -> device
    CREATE_DASHBOARD entities: (entities)
}

# Procedura che serve a prendere il service associato al dispositivo ed effettuare la relazione su thingsboard.
PROCEDURE global CHECK_SERVICE
    deviceID: integer # ID del device
    reqbody: map # Passo la map della richiesta POST da inviare a thingsboard a cui devo aggiungere l'attributo deviceProfileId che contiene
                 # l'id del service
    updateReqbody: reference # Ritorna la richiesta per thingsboard aggiornata
{
    SET updateReqbody: (reqbody)
    CC "Core" EVAL_EXPRESSION (ctobjs(deviceID, "hasService"))
    IF(result != "") {
        FOR service in:(result) {
            GET_RECORD_VALUE objectid: (VAL service) attribute: ("tb_object_id") val: serviceTbID
            CREATE_DEVICE_DEVICEPROFILE_ASSOCIATION_REQUEST serviceTbID: (serviceTbID) deviceProfileId: deviceProfileId
            SET updateReqbody["deviceProfileId"]: (deviceProfileId)
        }
    }
}

# Crea una nuova dashboard ed inserisce i widget al suo interno.
PROCEDURE global CREATE_DASHBOARD entities: array {
    CREATE_DASHBOARD_REQUEST modelid: (modelScenarioID) entities: (entities) dashboard: dashboard
    MAKE_POST_REQUEST path: ("api/dashboard") reqHeader: (header) reqbody: (lam_toJson(dashboard)) mapRespBody: mapRespBody respstat: respstat
}

## PROCEDURA CHE FORSE POSSO ELIMINARE
PROCEDURE global GET_ATTRIBUTES_NAME_ARRAY classid: integer allattrnames: reference {
    CC "Core" GET_ALL_ATTRS classid:(classid) # Prendo tutti gli attributi dalla classe selezionata

    SET allattrnames: ({})
    FOR id in:(attrids) {
        CC "Core" GET_ATTR_NAME attrid:(VAL id)
        SET dummy: (aappend(allattrnames, attrname))
    }
}

# Procedura che prende tutti gli attributi di un oggetto e li inserisce all'interno di una map.
PROCEDURE global GET_ALL_OBJECTS_ATTRIBUTES
    objectID: integer # ID dell'oggetto da cui voglio prendere gli attributi
    objectArray: reference # Ritorna una map con nome e valore degli attributi
{
    SET object: (map())
    CC "Core" GET_CLASS_ID objid:(objectID)
    #GET_ATTRIBUTES_NAME_ARRAY classid: (classid) allattrnames: attributesName

    CC "Core" GET_ALL_ATTRS classid:(classid) # Prendo tutti gli attributi dalla classe selezionata

    SET allattrnames: ({})
    FOR id in:(attrids) {
        CC "Core" GET_ATTR_NAME attrid:(VAL id)
        SET dummy: (aappend(allattrnames, attrname))
    }
 
    FOR j from:0 to:((attributesName.length)-1) {
        CC "Core" GET_ATTR_VAL objid:(objectID) attrname:(attributesName[j]) 
        SETL object[attributesName[j]]: (val) # Aggiunge tutti gli attributi all'interno dell'array device
    }

    CC "Core" GET_CLASS_NAME classid:(objectID)
    SETL object["object_class_type"]: (classname)
    SETL object["adoxx_obj_id"]: (objectID) # Salvo id oggetto adoxx sul json che contiene tutte le info dell'oggetto

    # ritorna un array contenente device completi di tutti gli attributi
    GET_SPECIFICATION_ATTRIBUTES classid: (classid) objectid: (objectID) objectMap: (object) updateMap: objectArray
}

# Prende tutti gli attributi della tabella specification e li ritorna come una map.
PROCEDURE global GET_SPECIFICATION_ATTRIBUTES
    classid: integer # ID classe dell'oggetto
    objectid: integer # ID oggetto
    objectMap: map # map con tutti gli attributi dell'oggetto
    updateMap: reference # ritorna la map aggiornata con gli attributi della tabella specification
{
    SET updateMap: (objectMap)
    SET specification: (map())

    # Ricavo la lista di tutti gli id degli attributi
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
    CC "Core" GET_ATTR_TYPE attrid:(attrid)

    IF(attrtype = "RECORD") {
        CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objectid) attrid:(attrid)

        # Leggo tutte le righe che ci sono all'interno di specification
        FOR row in:(rowids) {
            CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Attribute")
            SET key:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Value")
            #SETL objectMap[key]: (val)
            SET specification[key]: (val)
        }
    }
    SET updateMap["specification"]: (specification)
}

# Funzione che ritorna gli attributi della tabella platformData.
# Ritorna il valore dell'attributo che corrisponde ad "attribute"
PROCEDURE global GET_RECORD_VALUE objectid: integer attribute: string val: reference {
    CC "Core" GET_CLASS_ID objid:(objectid)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData")
    CC "Core" GET_ATTR_TYPE attrid:(attrid)
    CC "Core" GET_CLASS_NAME classid:(objectid)

    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objectid) attrid:(attrid)
    IF(classname != "attribute") {
        IF(rowids.length > 0) { #IF((rowids.length > 0) AND (classname != "attribute"))
            FOR row in:(rowids) {
                CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Attribute")
                IF(val = attribute) {
                    CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Value") # Ritorna il valore dell'id dell'oggetto 
                }
            }
        } ELSE {
            #CC "AdoScript" ERRORBOX "Nella tabella non sono presenti righe"
        }
    }
}

## Procedure per il salvataggio delle informazioni sulla piattaforma

# Procedura che serve a salvare sull'oggetto ADOxx l'ID di un oggetto che ho appena caricato sulla piattaforma
PROCEDURE global SAVE_OBJECT_ID objid: integer classname: string mapRespBody: map id: reference {
    SET dummy: (mapRespBody SUB "id")
    SET id: (dummy SUB "id")
    CC "Core" GET_CLASS_ID classname:(classname)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData") # classid è il valore che ritorna GET_CLASS_ID
    EMPTY_TABLE attrid: (attrid) objid: (objid) # Elimino tutte le righe della tabella prima di inserire il nuovo id di thingsboard
    CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid) # attrid è il valore che ritorna GET_ATTR_ID clid è il valore che ritorna GET_CLASS_ID 
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("tb_object_id") # rowid è il valore che ritorna ADD_REC_ROW
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(id) # rowid è il valore che ritorna ADD_REC_ROW
}

# Procedura che serve ad eliminare tutti i record di una tabella
PROCEDURE global EMPTY_TABLE attrid: integer objid: integer { 
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objid) attrid:(attrid)
    FOR row in:(rowids) {
        CC "Core" REMOVE_REC_ROW objid:(objid) attrid:(attrid) rowid:(VAL row)
    }
}

# Procedura che serve ad inserire su Thingsboard gli attributi che sono collegati ad un oggetto ADOxx.
# Prendo tutti gli oggetti di tipo attribute associati all'objectid e per ognuno leggo sia il nome che il valore, infine 
# effettuo la richiesta POST a Thingsboard per salvare l'attributo come telemetria.
PROCEDURE global UPLOAD_ATTRIBUTES objectid: integer objectType: string {
    CC "Core" EVAL_EXPRESSION (ctobjs(objectid, "hasAttribute"))
    IF(result != "") {
        GET_RECORD_VALUE objectid: (objectid) attribute: ("tb_object_id") val: fromObjTbID
        FOR attribute in:(result) {
            GET_ALL_OBJECTS_ATTRIBUTES objectID: (VAL attribute) objectArray: attributeData
            CREATE_ATTRIBUTE_REQUEST_DATA attributeData: (attributeData) request: reqbody
            CONVERT_TO_TB_TYPE adoxxType: (objectType) tbObjectType: tbType
            # https://demo.thingsboard.io/api/plugins/telemetry/ASSET/9087c150-433f-11ed-a339-0708081d40ce/timeseries/ANY?scope=ANY
            # attributes/SERVER_SCOPE
            # MAKE_POST_REQUEST path: ("api/plugins/telemetry/" + upper(tbType) + "/" + fromObjTbID + "/attributes/SERVER_SCOPE") reqHeader: (header) reqbody: (STR reqbody) mapRespBody: mapRespBody
            MAKE_POST_REQUEST path: ("api/plugins/telemetry/" + upper(tbType) + "/" + fromObjTbID + "/timeseries/ANY?scope=ANY") reqHeader: (header) reqbody: (STR reqbody) mapRespBody: mapRespBody respstat: respstat
        }
    }
}

# Il device type fa riferimento all'attributo type presente all'interno della classe Device. La procedura salva questo valore
# come attributo di tipo SERVER_SCOPE del device a cui fa riferimento.
PROCEDURE global SET_DEVICE_TYPE
    objectid: integer # Id del device a cui si vuole settare il tipo
    value: string # Valore dell'attributo type
{
    SET reqbody: (map())
    SET reqbody["type"]: (value)
    GET_RECORD_VALUE objectid: (objectid) attribute: ("tb_object_id") val: fromObjTbID
    MAKE_POST_REQUEST path: ("api/plugins/telemetry/DEVICE/" + fromObjTbID + "/attributes/SERVER_SCOPE") reqHeader: (header) reqbody: (STR reqbody) mapRespBody: mapRespBody respstat: respstat
}

# Procedura serve a mettere in relazione gli Asset con i rispettivi Device su Thingsboard.
PROCEDURE global CHECK_HASDEVICE_RELATION systemsArray: string {
    FOR system in:(systemsArray) {
        CC "Core" EVAL_EXPRESSION (ctobjs(VAL system, "hasDevice"))
        GET_RECORD_VALUE objectid: (VAL system) attribute: ("tb_object_id") val: systemTbID
        IF(result != "") {
            FOR device in:(result) {
                GET_RECORD_VALUE objectid: (VAL device) attribute: ("tb_object_id") val: deviceTbID
                CREATE_SYSTEM_DEVICE_REALATION_REQUEST fromObjectID: (systemTbID) toObjectID: (deviceTbID) reqbody: reqbody
                MAKE_POST_REQUEST path: ("api/relation") reqHeader: (header) reqbody: (STR reqbody) mapRespBody: mapRespBody respstat: respstat
            }
        }
    }
}


## Conversione e manipolazione dati

PROCEDURE global CONVERT_TO_TB_TYPE adoxxType: string tbObjectType: reference {
    IF (adoxxType = "system") {
        SET tbObjectType: ("asset")
    } ELSIF (adoxxType = "device") {
        SET tbObjectType: ("device")
    } ELSIF (adoxxType = "service") {
        SET tbObjectType: ("device_profile")
    } ELSIF (adoxxType = "widget") {
        SET tbObjectType: ("widget_type")
    } ELSIF (adoxxType = "attribute") {
        SET tbObjectType: ("attribute")
    }
}

# Tutte le procedure presenti da qui in poi servono a creare delle map che rappresentano i JSON da passare alle richieste POST
# da effettuare a Thingsboard.

PROCEDURE global CREATE_ASSET_REQUEST_DATA assetData: map body: reference {
    SET body: (map())
    SET additionalInfo: (map())
    SET specification: (assetData SUB "specification")

    SET additionalInfo["description"]: (assetData SUB "description")

    SET body["name"]: (assetData SUB "name")
    SET body["type"]: (specification SUB "type")
    SET body["label"]: (specification SUB "label")
    SET body["additionalInfo"]: (additionalInfo)
}

PROCEDURE global CREATE_ATTRIBUTE_REQUEST_DATA attributeData: map request: reference {
    SET request: (map())
    SETL request[attributeData SUB "name"]: (attributeData SUB "value")
}

PROCEDURE global CREATE_DEVICE_REQUEST_DATA deviceData: map body: reference {
    SET body: (map())
    SET additionalInfo: (map())
    SET specification: (deviceData SUB "specification")

    SET additionalInfo["description"]: (deviceData SUB "description")
    IF ((specification SUB "is_gateway") = "true") {
        SET additionalInfo["gateway"]: (1)
    } ELSE {
        SET additionalInfo["gateway"]: (0)
    }

    SET body["name"]: (deviceData SUB "name")
    SET body["type"]: (deviceData SUB "type")
    SET body["label"]: (specification SUB "label")
    SET body["additionalInfo"]: (additionalInfo)
}

PROCEDURE global CREATE_SYSTEM_DEVICE_REALATION_REQUEST fromObjectID: string toObjectID: string reqbody: reference {
    SETL reqbody: (map())
    SETL from: (map())
    SETL to: (map())

    SETL from["id"]: (fromObjectID)
    SETL from["entityType"]: ("ASSET")

    SETL to["id"]: (toObjectID)
    SETL to["entityType"]: ("DEVICE")

    SETL reqbody["from"]: (from)
    SETL reqbody["to"]: (to)
    SETL reqbody["type"]: ("Contains")
    SETL reqbody["typeGroup"]: ("COMMON")
}

PROCEDURE global CREATE_DEVICE_PROFILE_REQUEST serviceData: map data: reference {
    SETL data: (map())
    SETL configuration: (map())
    SETL transportConfiguration: (map())
    SETL profileData: (map())

    SETL configuration["type"]: "DEFAULT"
    SETL transportConfiguration["type"]: "DEFAULT"
    SETL profileData["configuration"]: (configuration)
    SETL profileData["transportConfiguration"]: (transportConfiguration)

    SETL data["name"]: (serviceData SUB "name")
    SETL data["type"]: 0   ## Type of the profile. Always 'DEFAULT' for now. Reserved for future use.
    SET protocol: (serviceData SUB "protocol")
    IF (protocol != "MQTT") {
        SETL data["transportType"]: ("DEFAULT")
    } ELSE {
        SETL data["transportType"]: ("MQTT")
    }
    SETL data["provisionType"]: ("DISABLED")
    SETL data["profileData"]: (profileData)
    SETL data["description"]: (serviceData SUB "description")
}

PROCEDURE global CREATE_DEVICE_DEVICEPROFILE_ASSOCIATION_REQUEST serviceTbID: string deviceProfileId: reference {
    SET deviceProfileId: (map())
    SET deviceProfileId["entityType"]: ("DEVICE_PROFILE")
    SET deviceProfileId["id"]: (serviceTbID)
}

PROCEDURE global CREATE_ENTITY_ALIAS aliasName: string entityType: string entityId: string alias: reference {
    SET alias: (map())
    SET filter: (map())
    SET singleEntity: (map())
    SET aliasId:(randomDiscreteUniformDist(10000000, 90000000))

    SET singleEntity["entityType"]: (entityType)
    SET singleEntity["id"]: (entityId)

    SET filter["type"]: ("singleEntity")
    SET filter["resolveMultiple"]: (0)
    SET filter["singleEntity"]: (singleEntity)

    SET alias["id"]: (STR aliasId)
    SET alias["alias"]: (aliasName)
    SET alias["filter"]: (filter)
}

# Use lam_toJson(dashboard) to convert output
PROCEDURE global CREATE_DASHBOARD_REQUEST modelid: integer entities: array dashboard: reference {
    SET dashboard:({
        "name": "Dashboard",
        "configuration": {
            "description": "",
            "widgets": map()
        },
        "states": {
            "default": {
                "name": "Dashboard",
                "layouts": {
                    "main": {
                        "widgets": {
                        },
                        "gridSettings": {
                            "backgroundColor": "#eeeeee",
                            "columns": 24,
                            "margin": 10,
                            "backgroundSizeMode": "100%"
                        }
                    }
                }
            }
        },
        "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
                "realtimeType": 0,
                "interval": 1000,
                "timewindowMs": 60000,
                "quickInterval": "CURRENT_DAY"
            },
            "history": {
                "historyType": 0,
                "interval": 1000,
                "timewindowMs": 60000,
                "fixedTimewindow": {
                    "startTimeMs": 1647250508451,
                    "endTimeMs": 1647336908451
                },
                "quickInterval": "CURRENT_DAY"
            },
            "aggregation": {
                "type": "AVG",
                "limit": 2500
            }
        }
    })
    SET dashboard["title"]: (basename)


    SET convJson:("")
    GET_SPECIFICATIONS platform:("ThingsBoard") specs:convJson
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelScenarioID) classname:("widget")
    SET widgetId:(randomDiscreteUniformDist(10000000, 90000000))
    FOR obj in:(objids) {
        CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("psm_type")
        SET psm_type:(val)
        SET class:(map())
        IF (type(convJson["widget"]) = "map") {
            SET class:(convJson["widget"])
        } ELSIF (type(convJson["widget"]) = "array" AND psm_type != "") {
            SET class:(convJson["widget"][0][psm_type])
        }
        IF (NOT class.empty) {
            SET id:(STR widgetId)
            SET widgetId:(widgetId + 1)
            SET widget:(class["config"])
            SET widget["id"]:(id)
            SET widgetConfig:(widget["config"])
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("name")
            SET widgetConfig["title"]:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("description")
            SET widget["description"]:(val)
            
            SET entityAliases: (map())
            FOR i from:0 to:((entities.length)-1) {
                SET entityAliases[entities[i] SUB "id"]: (entities[i])
            }

            #SET widgetConfig["datasources"]:(datasources)
            SET widget["config"]:(widgetConfig)
            SET configuration:(dashboard["configuration"])
            SET widgets:(configuration["widgets"])
            SET widgets[id]:(widget)
            SET configuration["entityAliases"]:(entityAliases)
            SET configuration["widgets"]:(widgets)
            SET dashboard["configuration"]:(configuration)
        }
    }
}
