EXECUTE file:("D:\\Universita\\Tesi\\ADOxx\\Script\\logic.asc")
SETL url: ("https://demo.thingsboard.io")
SETL header:({
    "Content-Type": "application/json", 
    "Authorization": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJlcnRob3JzcGFtQG91dGxvb2suaXQiLCJ1c2VySWQiOiJiOGM1Y2U3MC0xZDRhLTExZWQtOWVkZC1kZDZlYTBjY2I3ZjYiLCJzY29wZXMiOlsiVEVOQU5UX0FETUlOIl0sImlzcyI6InRoaW5nc2JvYXJkLmlvIiwiaWF0IjoxNjY1MTM1ODc5LCJleHAiOjE2NjY5MzU4NzksImZpcnN0TmFtZSI6IkRhdmlkZSIsImxhc3ROYW1lIjoiTW9ubmF0aSBTZWNvbmRhcmlvIiwiZW5hYmxlZCI6dHJ1ZSwicHJpdmFjeVBvbGljeUFjY2VwdGVkIjp0cnVlLCJpc1B1YmxpYyI6ZmFsc2UsInRlbmFudElkIjoiYjdkNjNlNTAtMWQ0YS0xMWVkLTllZGQtZGQ2ZWEwY2NiN2Y2IiwiY3VzdG9tZXJJZCI6IjEzODE0MDAwLTFkZDItMTFiMi04MDgwLTgwODA4MDgwODA4MCJ9.urJPw2V3eiz3ufB5k4uXfEU_TUq7SM3d_PuJRBYxH6eo-zvLY6YeHb4KfxkM1B4fMqqYGXEEHR_Eoj4_wvPePQ"
})

SELECT_MODELS

PROCEDURE global SELECT_MODELS {
    SETL modelList: ""
    CC "Core" GET_MODELGROUP_ID mgroupname:"Models" sep:"\t"
    CC "Core" GET_MODELGROUP_MODELS mgroupid:(mgroupid) getversionids

    FOR id in:(modelids) {
        CC "Core" GET_ATTR_VAL objid:(VAL id) attrname:("Model Type") 
        SETL modelType: (val)
        CC "Core" GET_ATTR_VAL objid:(VAL id) attrname:("Platform")
        SETL platformModel: (val)
        IF(modelType = "PSM" AND platformModel = "ThingsBoard") {
            CC "Core" GET_MODEL_INFO modelid: (VAL id)
            SET modelList: (modelname + " " + modelList)
        }
    }

    CC "AdoScript" MLISTBOX entries: (modelList)
                            toksep:" "
                            title:"Upload models"
                            oktext:"Upload"
                            boxtext:"Choose your models"
    IF (endbutton = "ok") {
        START_UPLOAD modelList: (selection)
    }
}

PROCEDURE global START_UPLOAD modelList: string {
    FOR modelName in:(modelList) {
        CC "Core" GET_MODEL_ID modelname:(modelName) modeltype:("IoT Scenario")
        SET modelScenarioID: (modelid)
        IF (modelid <= 0) {
            CC "Core" GET_MODEL_ID modelname:(modelName) modeltype:("IoT Logic")
            SET modelLogicID: (modelid)
        }
        CC "Core" GET_MODEL_BASENAME modelid:(modelid)

        ## Controllo in che tipo di modello mi trovo.
        CC "Core" GET_MODEL_MODELTYPE modelid:(modelid)
        #CC "AdoScript" MSGWIN ("Uploading to Thingsboard")
        IF(modeltype = "IoT Logic") {
            LOGIC
        }
        
        IF(modeltype = "IoT Scenario") {
            SCENARIO
        }
        #CC "AdoScript" MSGWIN hide
    }
}

PROCEDURE global SCENARIO {
    #SET entityAliases: (map())
    SET entities: ({})
    # Get all systems
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelScenarioID) classname:("system")
    SET allSystemsID: (objids)

    # Upload systems
    FOR system in:(allSystemsID) {
        GET_ALL_OBJECTS_ATTRIBUTES objectID: (VAL system) objectArray: systemJSON

        CREATE_ASSET_REQUEST_DATA assetData: (systemJSON) body: reqbody
        MAKE_POST_REQUEST path: ("api/asset") reqHeader: (header) reqbody: (STR reqbody) mapRespBody: mapRespBody            
        SAVE_OBJECT_ID objid: (VAL system) classname: (systemJSON SUB "object_class_type") mapRespBody: (mapRespBody) id: systemTbId
        UPLOAD_ATTRIBUTES objectid: (VAL system) objectType: ("system")
    }

    # Get all Device Profile    
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelScenarioID) classname:("service")
    SET allServicesID: (objids)
    FOR service in:(allServicesID) {
        GET_ALL_OBJECTS_ATTRIBUTES objectID: (VAL service) objectArray: serviceJSON

        CREATE_DEVICE_PROFILE_REQUEST serviceData: (serviceJSON) data: reqbody
        MAKE_POST_REQUEST path: ("api/deviceProfile") reqHeader: (header) reqbody: (STR reqbody) mapRespBody: mapRespBody
        SAVE_OBJECT_ID objid: (VAL service) classname: (serviceJSON SUB "object_class_type") mapRespBody: (mapRespBody) id: serviceTbId
        UPLOAD_ATTRIBUTES objectid: (VAL service) objectType: ("service")
    }

    # Get all devices
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelScenarioID) classname:("device")
    SET alldevicesID: (objids)
    FOR device in:(alldevicesID) {
        GET_ALL_OBJECTS_ATTRIBUTES objectID: (VAL device) objectArray: deviceJSON

        CREATE_DEVICE_REQUEST_DATA deviceData: (deviceJSON) body: reqbody
        CHECK_DEVICE_PROFILE deviceID: (VAL device) reqbody: (reqbody) updateReqbody: updateReqbody
        MAKE_POST_REQUEST path: ("api/device") reqHeader: (header) reqbody: (STR updateReqbody) mapRespBody: mapRespBody
        SAVE_OBJECT_ID objid: (VAL device) classname: (deviceJSON SUB "object_class_type") mapRespBody: (mapRespBody) id: deviceTbId
        UPLOAD_ATTRIBUTES objectid: (VAL device) objectType: ("device")
        CREATE_ENTITY_ALIAS aliasName: ((updateReqbody SUB "name") + "_alias") entityType: ("DEVICE") entityId: (deviceTbId) alias: alias
        SET dummy: (aappend(entities, alias))
    }
    CHECK_HASDEVICE_RELATION systemsArray: (allSystemsID)
    CREATE_DASHBOARD entities: (entities)
}

# passo a objectid l'id del device su cui mi trovo
PROCEDURE global CHECK_DEVICE_PROFILE deviceID: integer reqbody: map updateReqbody: reference {
    SET updateReqbody: (reqbody)
    CC "Core" EVAL_EXPRESSION (ctobjs(deviceID, "hasService"))
    IF(result != "") {
        FOR service in:(result) {
            GET_RECORD_VALUE objectid: (VAL service) attribute: ("tb_object_id") val: serviceTbID
            CREATE_DEVICE_DEVICEPROFILE_ASSOCIATION_REQUEST serviceTbID: (serviceTbID) deviceProfileId: deviceProfileId
            SET updateReqbody["deviceProfileId"]: (deviceProfileId)
        }
    }
}

PROCEDURE global CREATE_DASHBOARD entities: array {
    CREATE_DASHBOARD_REQUEST modelid: (modelScenarioID) entities: (entities) dashboard: dashboard
    MAKE_POST_REQUEST path: ("api/dashboard") reqHeader: (header) reqbody: (lam_toJson(dashboard)) mapRespBody: mapRespBody
    SAVE_DASHBOARD_TB_ID mapRespbody: (mapRespBody)
}

PROCEDURE global SAVE_DASHBOARD_TB_ID mapRespbody: map {
    SETL dummy: (mapRespbody SUB "id")
    SETL id: (dummy SUB "id")
    CC "Core" GET_CLASS_ID classname:("__ModelTypeMetaData__")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("Dashboard id")
    CC "Core" SET_ATTR_VAL objid:(modelScenarioID) attrid:(attrid) val:(id)
}

# Funzione che ritorna un'array degli id di tutti gli oggetti che ci sono all'interno del modello selezionato
PROCEDURE global GET_OBJS_ID_ARRAY modelid: integer objsIDArray: reference { 
    SET objsIDArray: ({})
    CC "Core" GET_ALL_OBJS modelid:(modelid) # prendo tutti gli oggetti che ci sono all'interno del modello

    # Creo array contenente tutti gli id che ho ricavato da GET_ALL_OBJS
    FOR id in:(objids) {
        CC "Core" GET_CLASS_ID objid:(VAL id)
        SET dummy: (aappend(objsIDArray, id))
    }
}

PROCEDURE global GET_ATTRIBUTES_NAME_ARRAY classid: integer allattrnames: reference {
    CC "Core" GET_ALL_ATTRS classid:(classid) # Prendo tutti gli attributi dalla classe selezionata

    SET allattrnames: ({})
    FOR id in:(attrids) {
        CC "Core" GET_ATTR_NAME attrid:(VAL id)
        #CC "Core" GET_ATTR_TYPE attrid:(VAL id)
        SET dummy: (aappend(allattrnames, attrname))
    }
}

PROCEDURE global GET_ALL_OBJECTS_ATTRIBUTES objectID: integer objectArray: reference {
    SET object: (map())
    CC "Core" GET_CLASS_ID objid:(objectID)
    GET_ATTRIBUTES_NAME_ARRAY classid: (classid) allattrnames: attributesName
    CC "Core" GET_CLASS_NAME classid:(objectID)
    SETL object["object_class_type"]: (classname)
    SETL object["adoxx_obj_id"]: (objectID) # Salvo id oggetto adoxx sul json che contiene tutte le info dell'oggetto 
    FOR j from:0 to:((attributesName.length)-1) {
        CC "Core" GET_ATTR_VAL objid:(objectID) attrname:(attributesName[j]) 
        SETL object[attributesName[j]]: (val) # Aggiunge tutti gli attributi all'interno dell'array device
    }
    # ritorna un array contenente device completi di tutti gli attributi
    GET_SPECIFICATION_ATTRIBUTES classid: (classid) objectid: (objectID) objectMap: (object) object_updated: objectArray
}

PROCEDURE global GET_SPECIFICATION_ATTRIBUTES classid: integer objectid: integer objectMap: map object_updated: reference {
    SET object_updated: (map())

    # Ricavo la lista di tutti gli id degli attributi
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
    CC "Core" GET_ATTR_TYPE attrid:(attrid)

    IF(attrtype = "RECORD") {
        CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objectid) attrid:(attrid)

        # Leggo tutte le righe che ci sono all'interno di specification
        FOR row in:(rowids) {
            CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Attribute")
            SET key:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Value")
            SETL objectMap[key]: (val)
        }
    }
    SET object_updated: (objectMap)
}

# Funzione che ritorna gli attributi della tabella platformData.
# Ritorna il valore dell'attributo che corrisponde ad "attribute"
PROCEDURE global GET_RECORD_VALUE objectid: integer attribute: string val: reference {
    CC "Core" GET_CLASS_ID objid:(objectid)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData")
    CC "Core" GET_ATTR_TYPE attrid:(attrid)
    CC "Core" GET_CLASS_NAME classid:(objectid)

    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objectid) attrid:(attrid)
    IF(classname != "attribute") {
        IF(rowids.length > 0) { #IF((rowids.length > 0) AND (classname != "attribute"))
            FOR row in:(rowids) {
                CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Attribute")
                IF(val = attribute) {
                    CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Value") # Ritorna il valore dell'id dell'oggetto 
                }
            }
        } ELSE {
            #CC "AdoScript" ERRORBOX "Nella tabella non sono presenti righe"
        }
    }
}

## Funzioni per il salvataggio delle informazioni sulla piattaforma

PROCEDURE global MAKE_POST_REQUEST path: string reqHeader: map reqbody: string mapRespBody: reference {
    HTTP_SEND_REQUEST(url + "/" + path) str_method:("POST") map_reqheaders:(reqHeader) str_reqbody:(reqbody) val_respcode:respstat map_respheaders:respheaders str_respbody:respbody
    CC "AdoScript" INFOBOX (respstat)
    SET mapRespBody: (fromJson(respbody))
}

# Funzione che serve a salvare sull'oggetto ADOxx l'ID di un oggetto che ho appena caricato sulla piattaforma
PROCEDURE global SAVE_OBJECT_ID objid: integer classname: string mapRespBody: map id: reference {
    SET dummy: (mapRespBody SUB "id")
    SET id: (dummy SUB "id")
    CC "Core" GET_CLASS_ID classname:(classname)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData") # classid è il valore che ritorna GET_CLASS_ID
    EMPTY_TABLE attrid: (attrid) objid: (objid) # Elimino tutte le righe della tabella prima di inserire il nuovo id di thingsboard
    CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid) # attrid è il valore che ritorna GET_ATTR_ID clid è il valore che ritorna GET_CLASS_ID 
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("tb_object_id") # rowid è il valore che ritorna ADD_REC_ROW
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(id) # rowid è il valore che ritorna ADD_REC_ROW
}

PROCEDURE global EMPTY_TABLE attrid: integer objid: integer { # Funzione che serve ad eliminare tutti i record di una tabella
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objid) attrid:(attrid)
    FOR row in:(rowids) {
        CC "Core" REMOVE_REC_ROW objid:(objid) attrid:(attrid) rowid:(VAL row)
    }
}

PROCEDURE global UPLOAD_ATTRIBUTES objectid: integer objectType: string {
    CC "Core" EVAL_EXPRESSION (ctobjs(objectid, "hasAttribute"))
    IF(result != "") {
        GET_RECORD_VALUE objectid: (objectid) attribute: ("tb_object_id") val: fromObjTbID
        FOR attribute in:(result) {
            GET_ALL_OBJECTS_ATTRIBUTES objectID: (VAL attribute) objectArray: attributeData
            CREATE_ATTRIBUTE_REQUEST_DATA attributeData: (attributeData) request: reqbody
            CONVERT_TO_TB_TYPE adoxxType: (objectType) tbObjectType: tbType
            # https://demo.thingsboard.io/api/plugins/telemetry/ASSET/9087c150-433f-11ed-a339-0708081d40ce/timeseries/ANY?scope=ANY
            # attributes/SERVER_SCOPE
            # MAKE_POST_REQUEST path: ("api/plugins/telemetry/" + upper(tbType) + "/" + fromObjTbID + "/attributes/SERVER_SCOPE") reqHeader: (header) reqbody: (STR reqbody) mapRespBody: mapRespBody
            MAKE_POST_REQUEST path: ("api/plugins/telemetry/" + upper(tbType) + "/" + fromObjTbID + "/timeseries/ANY?scope=ANY") reqHeader: (header) reqbody: (STR reqbody) mapRespBody: mapRespBody
        }
    }
}

PROCEDURE global CHECK_HASDEVICE_RELATION systemsArray: string { # OK
    FOR system in:(systemsArray) {
        CC "Core" EVAL_EXPRESSION (ctobjs(VAL system, "hasDevice"))
        GET_RECORD_VALUE objectid: (VAL system) attribute: ("tb_object_id") val: systemTbID
        IF(result != "") {
            FOR device in:(result) {
                GET_RECORD_VALUE objectid: (VAL device) attribute: ("tb_object_id") val: deviceTbID
                CREATE_SYSTEM_DEVICE_REALATION_REQUEST fromObjectID: (systemTbID) toObjectID: (deviceTbID) reqbody: reqbody
                MAKE_POST_REQUEST path: ("api/relation") reqHeader: (header) reqbody: (STR reqbody) mapRespBody: mapRespBody
            }
        }
    }
}


## Conversioni e manipolazione dati

PROCEDURE global CONVERT_TO_TB_TYPE adoxxType: string tbObjectType: reference {
    IF (adoxxType = "system") {
        SET tbObjectType: ("asset")
    } ELSIF (adoxxType = "device") {
        SET tbObjectType: ("device")
    } ELSIF (adoxxType = "service") {
        SET tbObjectType: ("device_profile")
    } ELSIF (adoxxType = "widget") {
        SET tbObjectType: ("widget_type")
    } ELSIF (adoxxType = "attribute") {
        SET tbObjectType: ("attribute")
    }
}

PROCEDURE global CREATE_ASSET_REQUEST_DATA assetData: map body: reference {
    SET body: (map())
    SET additionalInfo: (map())

    SET additionalInfo["description"]: (assetData SUB "description")

    SET body["name"]: (assetData SUB "name")
    SET body["type"]: (assetData SUB "type")
    SET body["label"]: (assetData SUB "label")
    SET body["additionalInfo"]: (additionalInfo)
}

PROCEDURE global CREATE_ATTRIBUTE_REQUEST_DATA attributeData: map request: reference {
    SET request: (map())
    SETL request[attributeData SUB "name"]: (attributeData SUB "value")
}

PROCEDURE global CREATE_DEVICE_REQUEST_DATA deviceData: map body: reference {
    SET body: (map())
    SET additionalInfo: (map())

    SET additionalInfo["description"]: (deviceData SUB "description")
    IF ((deviceData SUB "is_gateway") = "true") {
        SET additionalInfo["gateway"]: (1)
    } ELSE {
        SET additionalInfo["gateway"]: (0)
    }

    SET body["name"]: (deviceData SUB "name")
    SET body["type"]: (deviceData SUB "type")
    SET body["label"]: (deviceData SUB "label")
    SET body["additionalInfo"]: (additionalInfo)
}

PROCEDURE global CREATE_SYSTEM_DEVICE_REALATION_REQUEST fromObjectID: string toObjectID: string reqbody: reference {
    SETL reqbody: (map())
    SETL from: (map())
    SETL to: (map())

    SETL from["id"]: (fromObjectID)
    SETL from["entityType"]: ("ASSET")

    SETL to["id"]: (toObjectID)
    SETL to["entityType"]: ("DEVICE")

    SETL reqbody["from"]: (from)
    SETL reqbody["to"]: (to)
    SETL reqbody["type"]: ("Contains")
    SETL reqbody["typeGroup"]: ("COMMON")
}

PROCEDURE global CREATE_DEVICE_PROFILE_REQUEST serviceData: map data: reference {
    SETL data: (map())
    SETL configuration: (map())
    SETL transportConfiguration: (map())
    SETL profileData: (map())

    SETL configuration["type"]: "DEFAULT"
    SETL transportConfiguration["type"]: "DEFAULT"
    SETL profileData["configuration"]: (configuration)
    SETL profileData["transportConfiguration"]: (transportConfiguration)

    SETL data["name"]: (serviceData SUB "name")
    SETL data["type"]: 0   ## Type of the profile. Always 'DEFAULT' for now. Reserved for future use.
    SET protocol: (serviceData SUB "protocol")
    IF (protocol != "MQTT") {
        SETL data["transportType"]: ("DEFAULT")
    } ELSE {
        SETL data["transportType"]: ("MQTT")
    }
    SETL data["provisionType"]: ("DISABLED")
    SETL data["profileData"]: (profileData)
    SETL data["description"]: (serviceData SUB "description")
}

PROCEDURE global CREATE_DEVICE_DEVICEPROFILE_ASSOCIATION_REQUEST serviceTbID: string deviceProfileId: reference {
    SET deviceProfileId: (map())
    SET deviceProfileId["entityType"]: ("DEVICE_PROFILE")
    SET deviceProfileId["id"]: (serviceTbID)
}

PROCEDURE global CREATE_ENTITY_ALIAS aliasName: string entityType: string entityId: string alias: reference {
    SET alias: (map())
    SET filter: (map())
    SET singleEntity: (map())
    SET aliasId:(randomDiscreteUniformDist(10000000, 90000000))

    SET singleEntity["entityType"]: (entityType)
    SET singleEntity["id"]: (entityId)

    SET filter["type"]: ("singleEntity")
    SET filter["resolveMultiple"]: (0)
    SET filter["singleEntity"]: (singleEntity)

    SET alias["id"]: (STR aliasId)
    SET alias["alias"]: (aliasName)
    SET alias["filter"]: (filter)
}

# Use lam_toJson(dashboard) to convert output
PROCEDURE global CREATE_DASHBOARD_REQUEST modelid: integer entities: array dashboard: reference {
    SET dashboard:({
        "name": "Dashboard",
        "configuration": {
            "description": "",
            "widgets": map()
        },
        "states": {
            "default": {
                "name": "Dashboard",
                "layouts": {
                    "main": {
                        "widgets": {
                        },
                        "gridSettings": {
                            "backgroundColor": "#eeeeee",
                            "columns": 24,
                            "margin": 10,
                            "backgroundSizeMode": "100%"
                        }
                    }
                }
            }
        },
        "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
                "realtimeType": 0,
                "interval": 1000,
                "timewindowMs": 60000,
                "quickInterval": "CURRENT_DAY"
            },
            "history": {
                "historyType": 0,
                "interval": 1000,
                "timewindowMs": 60000,
                "fixedTimewindow": {
                    "startTimeMs": 1647250508451,
                    "endTimeMs": 1647336908451
                },
                "quickInterval": "CURRENT_DAY"
            },
            "aggregation": {
                "type": "AVG",
                "limit": 2500
            }
        }
    })
    SET dashboard["title"]: (basename)


    SET convJson:("")
    GET_SPECIFICATIONS platform:("ThingsBoard") specs:convJson
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelScenarioID) classname:("widget")
    SET widgetId:(randomDiscreteUniformDist(10000000, 90000000))
    FOR obj in:(objids) {
        CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("psm_type")
        SET psm_type:(val)
        SET class:(map())
        IF (type(convJson["widget"]) = "map") {
            SET class:(convJson["widget"])
        } ELSIF (type(convJson["widget"]) = "array" AND psm_type != "") {
            SET class:(convJson["widget"][0][psm_type])
        }
        IF (NOT class.empty) {
            SET id:(STR widgetId)
            SET widgetId:(widgetId + 1)
            SET widget:(class["config"])
            SET widget["id"]:(id)
            SET widgetConfig:(widget["config"])
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("name")
            SET widgetConfig["title"]:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("description")
            SET widget["description"]:(val)
            
            SET entityAliases: (map())
            FOR i from:0 to:((entities.length)-1) {
                SET entityAliases[entities[i] SUB "id"]: (entities[i])
            }

            #SET widgetConfig["datasources"]:(datasources)
            SET widget["config"]:(widgetConfig)
            SET configuration:(dashboard["configuration"])
            SET widgets:(configuration["widgets"])
            SET widgets[id]:(widget)
            SET configuration["entityAliases"]:(entityAliases)
            SET configuration["widgets"]:(widgets)
            SET dashboard["configuration"]:(configuration)
        }
    }
    #CC "AdoScript" EDITBOX text:(lam_toJson(dashboard))
}


#TODO:
# 
# 
#
#
#
#


