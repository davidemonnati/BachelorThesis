SET url: ("https://demo.thingsboard.io")
SET header:({
    "Content-Type": "application/json", 
    "Authorization": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJlcnRob3JzcGFtQG91dGxvb2suaXQiLCJ1c2VySWQiOiJiOGM1Y2U3MC0xZDRhLTExZWQtOWVkZC1kZDZlYTBjY2I3ZjYiLCJzY29wZXMiOlsiVEVOQU5UX0FETUlOIl0sImlzcyI6InRoaW5nc2JvYXJkLmlvIiwiaWF0IjoxNjY1MTM1ODc5LCJleHAiOjE2NjY5MzU4NzksImZpcnN0TmFtZSI6IkRhdmlkZSIsImxhc3ROYW1lIjoiTW9ubmF0aSBTZWNvbmRhcmlvIiwiZW5hYmxlZCI6dHJ1ZSwicHJpdmFjeVBvbGljeUFjY2VwdGVkIjp0cnVlLCJpc1B1YmxpYyI6ZmFsc2UsInRlbmFudElkIjoiYjdkNjNlNTAtMWQ0YS0xMWVkLTllZGQtZGQ2ZWEwY2NiN2Y2IiwiY3VzdG9tZXJJZCI6IjEzODE0MDAwLTFkZDItMTFiMi04MDgwLTgwODA4MDgwODA4MCJ9.urJPw2V3eiz3ufB5k4uXfEU_TUq7SM3d_PuJRBYxH6eo-zvLY6YeHb4KfxkM1B4fMqqYGXEEHR_Eoj4_wvPePQ"
})

SEND "GET_ACTIVE_MODEL" to:"Modeling" answer:modelid

IF (modelid = "") {
    CC "AdoScript" ERRORBOX "Open a blank model first!"
    EXIT
} ELSE {
    CC "Core" GET_ATTR_VAL objid:(VAL modelid) attrname:("Model Type") 
    SET modelType: (val)
    IF(modelType = "PIM") {
        CC "AdoScript" ERRORBOX "Select a PSM model first!"
        EXIT
    }
}

CC "Core" GET_CLASS_ID classname:("hasAttribute")
SET attributeRelationID: (classid)
CC "Core" GET_CLASS_ID classname:("hasService")
SET serviceRelationID: (classid)
CC "Core" GET_CLASS_ID classname:("hasDevice")
SET deviceRelationID: (classid)
CC "Core" GET_CLASS_ID classname:("hasLocation")
SET locationRelationID: (classid)
CC "Core" GET_CLASS_ID classname:("hasWidget")
SET widgetRelationID: (classid)

#GET_ALL_ASSET_TYPE
GET_DASHBOARD

PROCEDURE global GET_ALL_ASSET_TYPE {
    CC "AdoScript" MSGWIN ("Get asset list...")
    SET assetListName: ""
    SET assetMap: (map())
    MAKE_GET_REQUEST path: ("api/asset/types") reqHeader: (header) respbodyToMap: response
    FOR i from:0 to:((response.length)-1) {
        MAKE_GET_REQUEST path: ("api/tenant/assets?type=" + (response[i] SUB "type") + "&pageSize=9999&page=0") reqHeader: (header) respbodyToMap: assets
        SET assetData: (assets SUB "data")
        FOR j from:0 to:((assetData.length)-1) {
            SET assetListName: (assetListName + assetData[j] SUB "name" + ";")
            SET assetMap[assetData[j] SUB "name"]: (assetData[j])
        }
    }
    CC "AdoScript" MSGWIN hide
    CC "AdoScript" LISTBOX  entries: (assetListName)
            toksep:";"
            title:"Select asset do download!"
            oktext:"Download"
            boxtext:"Select asset"
            selection:"Cancel"
    IF (endbutton = "ok") {
        CC "AdoScript" MSGWIN ("Get all objects...")
        GET_SYSTEM selectedAsset: (assetMap SUB selection)
        CC "AdoScript" MSGWIN hide
    }
    CC "Core" SAVE_MODEL modelid: (VAL modelid)
}

PROCEDURE global GET_SYSTEM selectedAsset: map {
    SET classname: "system"
    SET additionalInfo: (selectedAsset SUB "additionalInfo")
    CC "Core" GET_CLASS_ID classname:(classname)
    CC "Core" CREATE_OBJ modelid:(VAL modelid) classid:(classid) objname:(selectedAsset SUB "name") # return objid
    SET assetID: (objid)

    CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(selectedAsset SUB "name")
    CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(additionalInfo SUB "description")

    # Save records
    # Get label
    CC "Core" GET_CLASS_ID classname:(classname)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
    CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("label")
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(selectedAsset SUB "label")
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:("String")
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:("Label of the asset")  

    # Get type
    CC "Core" GET_CLASS_ID classname:(classname)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
    CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("type")
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(selectedAsset SUB "type")
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:("String")
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:("Type of the asset")

    # Get Thingsboard id
    SET id: (selectedAsset SUB "id")
    CC "Core" GET_CLASS_ID classname:(classname)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData")
    CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("tb_object_id")
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(id SUB "id")

    # Check attributes
    GET_ATTRIBUTES fromObjId: (assetID) objType: ("ASSET")

    # Get devices
    MAKE_GET_REQUEST path: ("api/relations/info?fromId=" + (id SUB "id") + "&fromType=ASSET") reqHeader: (header) respbodyToMap: response
    SET deviceIdList: ({})
    FOR i from:0 to:((response.length)-1) {
        SET to: (response[i] SUB "to") # (to SUB "id")
        SET dummy: (aappend(deviceIdList, (to SUB "id")))
    }
    GET_CONNECTED_DEVICES deviceIdList: (deviceIdList)
}

PROCEDURE global GET_ATTRIBUTES fromObjId: integer objType: string {
    MAKE_GET_REQUEST path: ("api/plugins/telemetry/" + objType + "/" + (id SUB "id") + "/values/attributes") reqHeader: (header) respbodyToMap: response
    FOR i from:0 to:((response.length)-1) {
        SET classname: "attribute"
        CC "Core" GET_CLASS_ID classname:(classname)
        SET randomNumber: (randomDiscreteUniformDist(1000, 9999))
        SET attrName: (response[i] SUB "key" + "-" + STR randomNumber)
        #CC "Core" CREATE_OBJ modelid:(VAL modelid) classid:(classid) objname:(response[i] SUB "key") # return objid
        CC "Core" CREATE_OBJ modelid:(VAL modelid) classid:(classid) objname:(attrName)
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(response[i] SUB "key")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("type") val:(type(response[i] SUB "value")) # POTREBBE DARE ERRORI
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("value") val:(response[i] SUB "value")
        CC "Core" CREATE_CONNECTOR modelid:(VAL modelid) fromobjid:(fromObjId) toobjid:(objid) classid:(attributeRelationID)
    }
}

PROCEDURE global GET_CONNECTED_DEVICES deviceIdList: array {
    FOR i from:0 to:((deviceIdList.length)-1) {
        MAKE_GET_REQUEST path: ("api/device/" + deviceIdList[i]) reqHeader: (header) respbodyToMap: response
        SET deviceProfileId: (response SUB "deviceProfileId")

        SET additionalInfo: (response SUB "additionalInfo")
        CC "Core" GET_CLASS_ID classname:("device")
        CC "Core" CREATE_OBJ modelid:(VAL modelid) classid:(classid) objname:(response SUB "name") # return objid
        SET deviceID: (objid)
        CC "Core" SET_ATTR_VAL objid:(deviceID) attrname:("name") val:(response SUB "name")
        CC "Core" SET_ATTR_VAL objid:(deviceID) attrname:("description") val:(additionalInfo SUB "description")

        # Save records
        # is_gateway
        SET additionalInfo: (response SUB "additionalInfo")
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
        CC "Core" ADD_REC_ROW objid:(deviceID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("is_gateway")
        IF ((additionalInfo SUB "gateway") = 0) {
            CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:("false")
        } ELSE {
            CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:("true")
        }
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:("Boolean")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:("If this device is a gateway")

        # label
        SET additionalInfo: (response SUB "additionalInfo")
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
        CC "Core" ADD_REC_ROW objid:(deviceID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("label")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(response SUB "label")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:("String")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:("Label of the device")

        # Get Thingsboard id
        SET id: (response SUB "id")
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData")
        CC "Core" ADD_REC_ROW objid:(deviceID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("tb_object_id")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(id SUB "id")

        # Create connector system -> device
        CC "Core" CREATE_CONNECTOR modelid:(VAL modelid) fromobjid:(assetID) toobjid:(deviceID) classid:(deviceRelationID)

        # Get device profile
        GET_DEVICE_PROFILE deviceProfileId: (deviceProfileId SUB "id") deviceAdoxxId: (deviceID)

        # Get attributes
        MAKE_GET_REQUEST path: ("api/plugins/telemetry/" + "DEVICE" + "/" + deviceIdList[i] + "/values/attributes") reqHeader: (header) respbodyToMap: respAttributes
        FOR j from:0 to:((respAttributes.length)-1) {
            CC "Core" GET_CLASS_ID classname:("attribute")
            SET randomNumber: (randomDiscreteUniformDist(1000, 9999))
            SET attrName: (respAttributes[j] SUB "key" + "-" + STR randomNumber)
            CC "Core" CREATE_OBJ modelid:(VAL modelid) classid:(classid) objname:(attrName)
            SET attrId: (objid)
            CC "Core" SET_ATTR_VAL objid:(attrId) attrname:("name") val:(respAttributes[j] SUB "key")
            CC "Core" SET_ATTR_VAL objid:(attrId) attrname:("type") val:(type(respAttributes[j] SUB "value")) # POTREBBE DARE ERRORI
            CC "Core" SET_ATTR_VAL objid:(attrId) attrname:("value") val:(respAttributes[j] SUB "value")
            CC "Core" CREATE_CONNECTOR modelid:(VAL modelid) fromobjid:(deviceID) toobjid:(attrId) classid:(attributeRelationID)
        }
    }
}

PROCEDURE global GET_DEVICE_PROFILE deviceProfileId: string deviceAdoxxId: integer {
    MAKE_GET_REQUEST path: ("api/deviceProfile/" + deviceProfileId) reqHeader: (header) respbodyToMap: response
    SET id: (response SUB "id")

    # Before creating check if exist
    CC "Core" GET_CLASS_ID classname:("service")
    CC "Core" GET_OBJ_ID modelid:(VAL modelid) classid:(classid) objname:(response SUB "name")
    SET serviceId: (objid)
    IF (serviceId = -1) {
        # Create il service
        CC "Core" GET_CLASS_ID classname:("service")
        CC "Core" CREATE_OBJ modelid:(VAL modelid) classid:(classid) objname:(response SUB "name") # return objid
        SET serviceId: (objid)
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(response SUB "name")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(response SUB "description")
        SET protocol: (response SUB "transportType")
        IF (protocol != "MQTT") {
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("protocol") val:("DEFAULT")
        } ELSE {
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("protocol") val:("MQTT")
        }

        # Get Thingsboard id
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData")
        CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("tb_object_id")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(id SUB "id")
    } ELSE {
        # Make only relation
    }
    
    # Create connector device -> service
    CC "Core" CREATE_CONNECTOR modelid:(VAL modelid) fromobjid:(deviceAdoxxId) toobjid:(serviceId) classid:(serviceRelationID)
}

PROCEDURE global GET_DASHBOARD {
    CC "AdoScript" EDITFIELD caption:("Enter the thingsboard id of dashboard") title:("Import dashboard")

    SET dashboardTbId: (text)
    CC "Core" GET_CLASS_ID classname:("widget")
    IF (type(dashboardTbId) != "undefined") {
        #CC "AdoScript" MSGWIN ("Get dashboard...")
        GET_SPECIFICATIONS platform:("ThingsBoard") specs:specs # Read specification file
        MAKE_GET_REQUEST path: ("api/dashboard/" + dashboardTbId) reqHeader: (header) respbodyToMap: response
        SET widgets: ((response SUB "configuration") SUB "widgets") # prendo i widget dal JSON ricevuto da thingsboard
        SET keysArray: (mapKeysArray(widgets)) # creo array con gli id dei widget
        FOR i from:0 to:((keysArray.length)-1) { # Ogni widget lo creo sul modello adoxx
            SET widget: (widgets SUB keysArray[i])
            SET config: (widget SUB "config")
            CC "Core" CREATE_OBJ modelid:(VAL modelid) classid:(classid) objname:(config SUB "title")
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(config SUB "title")
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(widget SUB "description")

            CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
            SETL specificationId: (attrid)

            # Aggiungo gli attributi thingsboard del widget sulla tabella specification
            SET tbType:(widget SUB "bundleAlias")
            IF (tbType = "maps_v2") {
                SET psmType: ("map")
                SET widgetSpecs: (((specs SUB "widget")[0] SUB psmType) SUB "specs")
                SET specsArray: (mapKeysArray(widgetSpecs))
                CC "AdoScript" INFOBOX (widgetSpecs)
                
                FOR j from:0 to:((specsArray.length)-1) {
                    SET keys: (widgetSpecs SUB specsArray[j])
                    CC "AdoScript" INFOBOX (keys)
                    CC "Core" ADD_REC_ROW objid:(objid) attrid:(specificationId)
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:(specsArray[j])
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:(keys SUB "type")
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:(keys SUB "description")
                }
            } ELSIF(tbType = "charts") {
                SET psmType: ("line_chart")
                SET widgetSpecs: (((specs SUB "widget")[0] SUB psmType) SUB "specs")
                SET specsArray: (mapKeysArray(widgetSpecs))
                FOR j from:0 to:((specsArray.length)-1) {
                    SET keys: (widgetSpecs SUB specsArray[j])

                    CC "Core" ADD_REC_ROW objid:(objid) attrid:(specificationId)
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:(specsArray[j])
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:(keys SUB "type")
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:(keys SUB "description")
                }
            } ELSE {
                # Se non è ne di tipo maps ne di tipo charts non faccio nulla per ora
            }
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("psm_type") val:(psmType)
        }

        #CC "AdoScript" MSGWIN hide
    } ELSE {
        CC "AdoScript" INFOBOX ("The dashboard will not be imported.")
    }
}

PROCEDURE global GET_ALL_DEVICE_TYPE {
    MAKE_GET_REQUEST path: ("api/device/types") reqHeader: (header) respbodyToMap: response
    FOR i from:0 to:((response.length)-1) {
        CC "AdoScript" INFOBOX (response[i] SUB "type")
    }
}

PROCEDURE global MAKE_GET_REQUEST path: string reqHeader: map respbodyToMap: reference {
    HTTP_SEND_REQUEST(url + "/" + path) str_method:("GET") map_reqheaders:(header) str_reqbody:("") val_respcode:respstat map_respheaders:respheaders str_respbody:respbody
    SET respbodyToMap: (fromJson(respbody))
}

PROCEDURE global READ_SPECS_FILE specs: reference {
    CC "AdoScript" FREAD file:("db:\\thingsboard.json")
    IF (ecode != 0) {
        CC "AdoScript" ERRORBOX ("The file is not readable!") ok
        EXIT
    }

    SET specs: (fromJson(text))
}






