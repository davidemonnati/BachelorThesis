
PROCEDURE global GET_FLOWS applicationId: string {
    GET_ENDPOINT iType: ("workflow") operation: ("get_workflows") values: ({applicationId}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
    SETL items: (response SUB "items")
    
    FOR i from:0 to:((items.length)-1) {
        CC "Core" GET_MODELGROUP_ID mgroupname:("Models") sep:("~")
        CC "Core" CREATE_MODEL modeltype:("IoT Logic") modelname:("temp_logic") version:"" mgroups:(mgroupid)
        SETL toDelete: (modelid)
        CC "Core" LOAD_MODEL modelid:(modelid)

        PIM_TO_PSM platform:("Losant") specs: (specifications) modelID: (toDelete) targetID: targetID
        CC "Core" DELETE_MODEL modelid:(toDelete)

        # Salvo il token auth nella variabile auth del nuovo modello PSM appena creato
        CC "Core" GET_CLASS_ID classname:("__ModelTypeMetaData__")
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("auth")
        CC "Core" SET_ATTR_VAL objid:(targetID) attrid:(attrid) val:(replall(auth, "Bearer ", ""))

        # get trigger
        SETL triggers: (items[i] SUB "triggers")
        GET_TRIGGER modelID: (targetID) triggers: (triggers)

        CC "Core" SAVE_MODEL modelid:(targetID) update-sys-attrs:1
        CC "Modeling" CLOSE modelid: (targetID) quiet close
    }
}

PROCEDURE global GET_TRIGGER modelID: integer triggers: array {
    FOR i from:0 to:((triggers.length)-1) {
        SETL triggerType: (triggers[i] SUB "type")
        SETL triggerLosantID: (triggers[i] SUB "id")
        SEARCH_NODE_TYPE nodeToSearch: (triggerType) sObj: sObj sType: sType

        IF (sObj = "pubsub_out") {
            SETL sObj: ("pubsub_in")
        }

        CC "Core" GET_CLASS_ID classname:(sObj)
        CC "Core" CREATE_OBJ modelid:(modelID) classid:(classid) objname:((triggers[i] SUB "meta") SUB "label")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:((triggers[i] SUB "meta") SUB "label")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:((triggers[i] SUB "meta") SUB "description")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("psm_type") val:(sType)
        SET_SPECIFICATIONS objID: (STR objid) specs: (specifications)

        # get nodes
        SETL nodes: (items[i] SUB "nodes")
        GET_NODES modelID: (targetID) nodes: (nodes) triggerAdoxxID: (objid) nodesIdMap: nodesIdMap
    }
}

PROCEDURE global GET_NODES modelID: integer nodes: array triggerAdoxxID: integer nodesIdMap: reference {
    SETL nodesID: ({})
    SETL nodesIdMap: (map())
    SETL nodesArray: ({})
    FOR i from:0 to:((nodes.length)-1) {
        SETL nodeToSearch: (nodes[i] SUB "type")
        SEARCH_NODE_TYPE nodeToSearch: (nodeToSearch) sObj: sObj sType: sType
        SET randomNumber: (randomDiscreteUniformDist(1000, 9999))
        CC "Core" GET_CLASS_ID classname:(sObj)
        CC "Core" CREATE_OBJ modelid:(modelID) classid:(classid) objname:(((nodes[i] SUB "meta") SUB "label") + "_" + STR randomNumber)
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:((nodes[i] SUB "meta") SUB "label")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:((nodes[i] SUB "meta") SUB "description")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("psm_type") val:(sType)
        SET_SPECIFICATIONS objID: (STR objid) specs: (specifications)
        SETL nodesIdMap[(nodes[i] SUB "id")]: (objid)
        SET dummy: (aappend(nodesArray, objid))
    }
    
    # Crea relazione tra trigger e il primo nodo
    CC "Core" GET_CLASS_ID classname:("contains")
    CC "Core" CREATE_CONNECTOR modelid:(modelID) fromobjid:(triggerAdoxxID) toobjid:(nodesArray[0]) classid:(classid)
    CC "Core" SET_ATTR_VAL objid:(objid) attrname:("psm_type") val:("Success")
    CREATE_RELATIONS nodes: (nodes) nodesIdMap: (nodesIdMap)
}

PROCEDURE global CREATE_RELATIONS nodes: array nodesIdMap: map {
    CC "Core" GET_CLASS_ID classname:("contains")
    FOR i from:0 to:((nodes.length)-1) {
        SETL outputIds: ((nodes[i] SUB "outputIds")[0])
        FOR j from:0 to:((outputIds.length)-1) {
            SETL toobjid: (nodesIdMap SUB outputIds[j])
            SETL fromobjid: (nodesIdMap SUB (nodes[i] SUB "id"))
            CC "Core" CREATE_CONNECTOR modelid:(modelID) fromobjid:(fromobjid) toobjid:(toobjid) classid:(classid)
            SET_SPECIFICATIONS objID: (STR objid) specs: (specifications)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("psm_type") val:("Success")
        }
    }
}

PROCEDURE global SEARCH_NODE_TYPE
    nodeToSearch: string # Nome del trigger che si vuole cercare all'interno del file JSON
    sObj: reference # Ritorna il nome dell'oggetto che ha trovato (string)
    sType: reference # Ritorna il tipo dell'oggetto che ha trovato (string)
{
    SET sType: ("")
    SET sObj: ("")
    FOR obj in:(mapKeysList(specifications)) sep:("~") {
        IF(type(specifications SUB obj) = "array") {
            FOR type in:(mapKeysList((specifications SUB obj)[0])) sep:("~") {
                IF (type(((specifications SUB obj)[0] SUB type) SUB "config") = "map") {
                    IF (type((((specifications SUB obj)[0] SUB type) SUB "config") SUB "type") != "undefined") {
                        IF (((((specifications SUB obj)[0] SUB type) SUB "config") SUB "type") = nodeToSearch) {
                            SET sType: (type)
                            SET sObj: (obj)
                        }
                    }
                }
            }
        }
    }
}

