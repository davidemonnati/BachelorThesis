EXECUTE file:("D:\\Universita\\Tesi\\ADOxx\\Script\\auth.asc")
EXECUTE file:("D:\\Universita\\Tesi\\ADOxx\\Script\\ImportWorkFlow.asc")

SETG selectedPlatform: ("Losant")

CC "Core" GET_CLASS_ID classname:("hasAttribute")
SET attributeRelationID: (classid)
CC "Core" GET_CLASS_ID classname:("hasService")
SET serviceRelationID: (classid)
CC "Core" GET_CLASS_ID classname:("hasDevice")
SET deviceRelationID: (classid)
CC "Core" GET_CLASS_ID classname:("hasLocation")
SET locationRelationID: (classid)
CC "Core" GET_CLASS_ID classname:("hasWidget")
SET widgetRelationID: (classid)
CC "Core" GET_CLASS_ID classname:("subsystem")
SET subsystemRelationID: (classid)


IMPORT_LOSANT

PROCEDURE global IMPORT_LOSANT {
    SEND "GET_ACTIVE_MODEL" to:"Modeling" answer:modelid
    SETL newModelID: (VAL modelid)

    IF (modelid = "") {
        CC "AdoScript" ERRORBOX "Open a blank model first!"
        EXIT
    } ELSE {
        CC "Core" GET_MODEL_MODELTYPE modelid:(VAL modelid)
        CC "Core" GET_ATTR_VAL objid:(VAL modelid) attrname:("Platform")
        SETL platform: (val)
        CC "Core" GET_ATTR_VAL objid:(VAL modelid) attrname:("Model Type")
        IF(val = "PIM" OR modeltype != "IoT Scenario" OR platform != selectedPlatform) {
            CC "AdoScript" ERRORBOX "Select IoT scenario model first!" title:("Invalid model")
            EXIT
        }
    }

    GET_SPECIFICATIONS platform: (selectedPlatform) specs: specs
    SET specifications: (specs)
    
    GET_LOGGED_USER modelid: (newModelID) respstat: status errcode: errocode
    IF(status = 200) {
        GET_APPLICATIONS selectedAppID: appID
        GET_LOSANT_DEVICES applicationId: (appID)
        GET_DASHBOARD applicationId: (appID)
        GET_FLOWS applicationId: (appID)
    }
}

PROCEDURE global GET_APPLICATIONS selectedAppID: reference {
    GET_ENDPOINT iType: ("application") operation: ("get_applications") values: ({selectedAppID}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
    SETL items: (response SUB "items")
    SETL appMap: (map())
        
    FOR i from:0 to:((items.length)-1) {
        SET appMap[items[i] SUB "name"]: (items[i] SUB "applicationId")
    }

    CC "AdoScript" LISTBOX  entries: (mapKeysList(appMap))
                            toksep:"~"
                            title:"Select Application"
                            oktext:"Select"
                            boxtext:"Choose application"
                            selection:"Second Entry"
    IF (endbutton = "ok") {
        SETL selectedAppID: (appMap SUB selection)
    } ELSE {
        EXIT
    }
}

PROCEDURE global GET_LOSANT_DEVICES applicationId: string {
    GET_ENDPOINT iType: ("devices") operation: ("get_all_devices") values: ({applicationId}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
    SETL allItems: (fromJson(lam_toJson(response)) SUB "items")
    SETL systemsArray: ({})
    SETL devicesArray: ({})
    SETL modelDevices: ({})
    SETL mapIds: (map())

    FOR i from:0 to:((allItems.length)-1) {
        IF((allItems[i] SUB "deviceClass") = "system") {
            SET dummy: (aappend(systemsArray, allItems[i]))
        } ELSE {
            SET dummy: (aappend(devicesArray, allItems[i]))
        }
    }

    # Get Systems
    FOR i from:0 to:((systemsArray.length)-1) {
        SETL classname: ("system")
        CC "Core" GET_CLASS_ID classname:(classname)
        CC "Core" CREATE_OBJ modelid:(newModelID) classid:(classid) objname:(systemsArray[i] SUB "name")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(systemsArray[i] SUB "name")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(systemsArray[i] SUB "description")
        SET entity: (objid)
        SET dummy: (aappend(modelDevices, entity))

        # Save records
        # Get Losant id
        CC "Core" GET_CLASS_ID classname:(classname)
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData")
        CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("losant_object_id")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(systemsArray[i] SUB "id")

        SETL mapIds[(systemsArray[i] SUB "id")]: (objid)
        SET_SPECIFICATIONS objID: (STR objid) specs: (specifications)
        GET_ATTRIBUTES attrArray: (systemsArray[i] SUB "attributes") objID: (objid)
    }

    # Get Devices
    FOR i from:0 to:((devicesArray.length)-1) {
        SETL classname: ("device")
        CC "Core" GET_CLASS_ID classname:(classname)
        CC "Core" CREATE_OBJ modelid:(newModelID) classid:(classid) objname:(devicesArray[i] SUB "name")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(devicesArray[i] SUB "name")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(devicesArray[i] SUB "description")
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("psm_type")
        CC "Core" SET_ATTR_VAL objid:(objid) attrid:(attrid) val:(devicesArray[i] SUB "deviceClass")
        SET entity: (objid)
        SET dummy: (aappend(modelDevices, entity))

        # Save records
        # Get Losant id
        CC "Core" GET_CLASS_ID classname:(classname)
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData")
        CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("losant_object_id")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(devicesArray[i] SUB "id")

        SETL mapIds[(devicesArray[i] SUB "id")]: (objid)
        SET_SPECIFICATIONS objID: (STR objid) specs: (specifications)
        GET_ATTRIBUTES attrArray: (devicesArray[i] SUB "attributes") objID: (objid)
    }
    CREATE_CHILD_RELATIONS modelDevices: (modelDevices) allItems: (allItems) mapIds: (mapIds)
    GET_SERVICES mapIds: (mapIds)
}

PROCEDURE global CREATE_CHILD_RELATIONS modelDevices: array allItems: array mapIds: map {
    SETL child: ({})
    FOR i from:0 to:((modelDevices.length)-1) {
        GET_RECORD_VALUE objectid: (modelDevices[i]) attribute: ("losant_object_id") val: childLosantID
        # Cerco child dentro l'array (allItems) con tutti gli oggetti
        FOR j from:0 to:((allItems.length)-1) {
            IF ((allItems[j] SUB "id") = childLosantID) {
                SET child: (allItems[j])
            }
        }

        SETL parentLosantID: (child SUB "parentId")
        SETL partentAdoxxID: (mapIds SUB parentLosantID)

        IF(type(partentAdoxxID) != "undefined") {
            CC "Core" GET_CLASS_ID objid:(modelDevices[i])
            CC "Core" GET_CLASS_NAME classid:(classid)
            IF(classname = "system") {
                CC "Core" CREATE_CONNECTOR modelid:(newModelID) fromobjid:(partentAdoxxID) toobjid:(modelDevices[i]) classid:(subsystemRelationID)
            } ELSIF (classname = "device") {
                CC "Core" CREATE_CONNECTOR modelid:(newModelID) fromobjid:(partentAdoxxID) toobjid:(modelDevices[i]) classid:(deviceRelationID)
            }
        }
    }
}

PROCEDURE global GET_SERVICES mapIds: map {
    SETL classname: ("service")
    GET_ENDPOINT iType: ("service") operation: ("get_app_keys") values: ({applicationId}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
    SETL appkeys: (response SUB "items")

    FOR i from:0 to:((appkeys.length)-1) {
        SETL serviceName: (appkeys[i] SUB "pubTopics")
        CC "Core" GET_CLASS_ID classname:(classname)
        CC "Core" CREATE_OBJ modelid:(newModelID) classid:(classid) objname:(serviceName[0])
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(appkeys[i] SUB "description")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("protocol") val:("MQTT")

        SETL deviceLosantID: ((appkeys[i] SUB "deviceIds")[0])
        SETL fromAdoxxObjId: (mapIds SUB deviceLosantID)
        CC "Core" CREATE_CONNECTOR modelid:(newModelID) fromobjid:(fromAdoxxObjId) toobjid:(objid) classid:(serviceRelationID)
    }
}

PROCEDURE global GET_ATTRIBUTES attrArray: array objID: integer {
    FOR j from:0 to:((attrArray.length)-1) {
        SETL randomNumber: (randomDiscreteUniformDist(1000, 9999))
        SETL tags: (attrArray[j] SUB "attributeTags")
        SETL attrKey: (attrArray[j] SUB "name")
        IF (attrKey != "location") {
            CC "Core" GET_CLASS_ID classname:("attribute")
            SETL attrName: (attrKey + "-" + STR randomNumber)
            CC "Core" CREATE_OBJ modelid:(newModelID) classid:(classid) objname:(attrName)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(attrKey)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(attrArray[j] SUB "description")
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("type") val:(attrArray[j] SUB "dataType")
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("value") val:(tags SUB attrKey)
            SETL rel: (attributeRelationID)
        } ELSE {
            CC "Core" GET_CLASS_ID classname:("location")
            CC "Core" CREATE_OBJ modelid:(newModelID) classid:(classid) objname:("location-" + STR randomNumber)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(attrArray[j] SUB "description")
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("lat") val:(tags SUB "latitude")
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("lon") val:(tags SUB "longitude")
            SETL rel: (locationRelationID)
        }
        CC "Core" CREATE_CONNECTOR modelid:(newModelID) fromobjid:(entity) toobjid:(objid) classid:(rel)
    }
}

PROCEDURE global GET_DASHBOARD applicationId: string {
    GET_ENDPOINT iType: ("dashboard") operation: ("get_application_dashboards") values: ({applicationId}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
    IF ((response SUB "count") > 0) {
        SETL blocks: ((fromJson(lam_toJson(response)) SUB "items")[0] SUB "blocks")
        CC "Core" GET_CLASS_ID classname:("widget")

        FOR i from:0 to:((blocks.length)-1) {
            CC "Core" CREATE_OBJ modelid:(newModelID) classid:(classid) objname:(blocks[i] SUB "title")
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(blocks[i] SUB "title")
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(blocks[i] SUB "description")
            SET_SPECIFICATIONS objID: (STR objid) specs: (specifications)
            SETL wType: (blocks[i] SUB "blockType")

            IF (wType = "map") {
                CC "Core" SET_ATTR_VAL objid:(objid) attrname:("psm_type") val:(wType)
            } ELSE {
                CC "Core" SET_ATTR_VAL objid:(objid) attrname:("psm_type") val:("line_chart")
            }

            CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
            CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
            CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("attribute")
            CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(devicesArray[i] SUB "id")
            CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:("String")
            CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:("Attribute name")
        }
    }
}

