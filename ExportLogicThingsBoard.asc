# Script che ha come responsabilità quella di esportare un modello di tipo IoT Logic su Thingsboard.
# Il modello viene salvato all'interno di una rule chain a cui viene assegnato lo stesso nome del modello logico.

# Procedura che prende tutti gli oggetti presenti nel modello logico e li carica all'interno di una rule chain su thingsboard.
PROCEDURE global THINGSBOARD_LOGIC {
    SET objects: ({})
    GET_OBJS_ID_ARRAY modelid: (modelLogicID) objsIDArray: objsIDArray

    #Aggiungo tutti gli id dei nodi del modello logico in un array
    FOR i from:0 to:((objsIDArray.length)-1) {
        GET_ALL_OBJECT_ATTRIBUTES objectID: (VAL objsIDArray[i]) objectArray: data
        SET dummy: (aappend(objects, data))
    }
    
    CREATE_RULECHAIN_MAP_REQUEST modelname: (modelname) reqbody: reqbody
    GET_ENDPOINT iType: ("rule_chain") operation: ("create_rule_chain") values: ({}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: (STR reqbody) reqHeader: (header) method: (method) mapRespBody: mapRespBody respstat: respstat
    SAVE_RULECHAIN_TB_ID mapRespBody: (mapRespBody)
    SAVE_LOGIC objects: (objects) reqbody: reqbody # salva i nodi all'interno della rulechain che ho appena creato
    GET_ENDPOINT iType: ("rule_chain") operation: ("update_rule_chain") values: ({}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: (lam_toJson(reqbody)) reqHeader: (header) method: (method) mapRespBody: mapRespBody respstat: respstat
    #CC "AdoScript" INFOBOX ("Export successfully completed")
}

# Procedura che riceve in input l'array di tutti i nodi e crea il JSON da inviare a Thingsboard come POST request.
PROCEDURE global SAVE_LOGIC
    objects: array # array con gli id di tutti i nodi del modello logico
    reqbody: reference # ritorna il JSON da inviare come richiesta POST a thingsboard
{
    SETL ruleChain: (map())
    SETL nodes: ({})
    SETL connectors: ({})
    SETL index: 0
    FOR i from:0 to:((objects.length)-1) {
        # data_stream_in corrisponde al nodo input della rule chain di thingsboard, il quale non contiene nessun attributo e per questo motivo lo tratto
        # in modo diverso rispetto agli altri nodi.
        # Data_stream_in inoltre contiene anche l'attributo che associa la rule chain al service che devo leggere per effettuare
        # l'associazione tra il device profile e la rule chain su Thingsboard
        IF(objects[i] SUB "object_class_type" = "data_stream_in") {
            SETL ruleChain["firstNodeIndex"]: ("0")
            CC "Core" GET_CLASS_ID classname:("service")
            SET serviceClassID: (classid)
            CC "Core" GET_CLASS_ID classname:("data_stream_in")
            SET dataStreamInClassID: (classid)
            CC "Core" GET_INTERREF objid:(objects[i] SUB "adoxx_obj_id") attrname:("service") index:0
            CC "Core" GET_OBJ_ID modelid:(tmodelid) classid:(serviceClassID) objname:(tobjname)
            UPDATE_DEVICE_PROFILE deviceProfileId: (objid)
        } ELSE {
            SET objid: (objects[i] SUB "adoxx_obj_id")
            ADD_TABLE_RECORD objid: (objid) classname: (objects[i] SUB "object_class_type") tableName: ("platformData") recAttr: ("index") recVal: (STR index)
            CREATE_REQUEST_NODE oggetto: (objects[i]) nodo: nodo
            SET dummy: (aappend(nodes, nodo))


            CC "Core" GET_CONNECTORS objid:(objid) out
            GET_RECORD_VALUE objectid: (objid) attribute: ("index") val: fromIndex
            FOR connector in:(objids) {
                CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connector)
                GET_CONNECTOR_ATTRIBUTES connectorID: (VAL connector) connAttr: connAttr
                GET_RECORD_VALUE objectid: (toobjid) attribute: ("index") val: toIndex
                SET attributes: (fromJson(STR connAttr))
                GET_CONNECTION fromIndex: (fromIndex) toIndex: (toIndex) label: (attributes SUB "output") type: (attributes SUB "psm_type") conn: conn
                SET dummy: (aappend(connectors, conn))
            }
            
            SETL index: (index+1)
        }
    }
    GET_RULECHAIN_TB_ID val: rulechainTbID
    CREATE_RULE_UPLOAD_REQUEST ruleChain: (ruleChain) nodes: (nodes) rulechainID: (rulechainTbID) reqbody: reqbody
    SETL reqbody["connections"]: (connectors)
}

# Procedura che prende l'ID del device profile associato al modello logico ed effettua l'associazione su thingsboard.
PROCEDURE global UPDATE_DEVICE_PROFILE deviceProfileId: integer {
    GET_RECORD_VALUE objectid: (objid) attribute: ("tb_object_id") val: deviceProfileTbId
    GET_ALL_OBJECT_ATTRIBUTES objectID: (objid) objectArray: serviceData
    GET_RULECHAIN_TB_ID val: ruleChainTbId
    CREATE_UPDATE_REQUEST serviceData: (serviceData) deviceProfileTbId: (deviceProfileTbId) ruleChainTbId: (ruleChainTbId) body: reqbody
    GET_ENDPOINT iType: ("service") operation: ("create_device_profile") values: ({}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: (STR reqbody) reqHeader: (header) method: (method) mapRespBody: mapRespBody respstat: respstat
}

# Ritorna un'array degli id di tutti gli oggetti che ci sono all'interno del modello selezionato
PROCEDURE global GET_OBJS_ID_ARRAY modelid: integer objsIDArray: reference { 
    SET objsIDArray: ({})
    CC "Core" GET_ALL_OBJS modelid:(modelid) # prendo tutti gli oggetti che ci sono all'interno del modello

    # Creo array contenente tutti gli id che ho ricavato da GET_ALL_OBJS
    CONVERT_LIST_TOARRAY input: (objids) output: objsIDArray
}

# Passando l'id di un connettore di tipo "contains" viene ritornata una map con i suoi attributi
PROCEDURE global GET_CONNECTOR_ATTRIBUTES
    connectorID: integer # ID del connettore
    connAttr: reference # ritorna una map con i suoi attributi
{
    SET connAttr: (map())
    CC "Core" GET_CLASS_ID classname:("contains")
    GET_ATTRIBUTES_NAME_ARRAY classid: (classid) allattrnames: attributesName
    SETL connAttr["adoxx_obj_id"]: (connectorID) # Salvo id oggetto adoxx sul json che contiene tutte le info dell'oggetto 
    FOR j from:0 to:((attributesName.length)-1) {
        CC "Core" GET_ATTR_VAL objid:(connectorID) attrname:(attributesName[j]) 
        SETL connAttr[attributesName[j]]: (val) # Aggiunge tutti gli attributi all'interno dell'array device
    }
    IF ((connAttr SUB "output") = "") { # Aggiungo un'etichetta del nodo di default se non è stata inserita
        SET connAttr["output"]: ("connector")
    }
}

PROCEDURE global GET_RULECHAIN_TB_ID val: reference {
    GET_TB_ATTR_ID attrid: attrid
    CC "Core" GET_ATTR_VAL objid:(modelLogicID) attrid:(attrid)
}

PROCEDURE global SAVE_RULECHAIN_TB_ID mapRespBody: map {
    SETL dummy: (mapRespBody SUB "id")
    SETL id: (dummy SUB "id")
    GET_TB_ATTR_ID attrid: attrid
    CC "Core" SET_ATTR_VAL objid:(modelLogicID) attrid:(attrid) val:(id)
}

# Procedura che serve a ricavare l'id dell'attributo "Thingsboard id" nel modello logico, ho creato questa funzione per evitare la duplicazione del codice.
PROCEDURE global GET_TB_ATTR_ID attrid: reference {
    CC "Core" GET_CLASS_ID classname:("__ModelTypeMetaData__")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("Thingsboard id")
}

# Ritorna il tipo corrispondente di thingsboard del nodo che viene passato in input
PROCEDURE global GET_TB_TYPE adoxxType: string tipoPSM: string tbObjectType: reference {
    SET tbObjectType: ("")
    IF (tipoPSM != "") {
        SET obj: (specifications SUB adoxxType)
        SET nodoPsm: (obj[0] SUB tipoPSM)
        SET config: (nodoPsm SUB "config")
        SET tbObjectType: (config SUB "type")
    } ELSE {
        SET obj: (specifications SUB adoxxType)
        SET config: (obj SUB "config")
        SET tbObjectType: (config SUB "type")
    }
}

# Tutte le procedure presenti da qui in poi servono a creare delle map che rappresentano i JSON da passare alle richieste POST
# da effettuare a Thingsboard.


PROCEDURE global CREATE_REQUEST_NODE oggetto: map nodo: reference {
    GET_TB_TYPE adoxxType: (oggetto SUB "object_class_type") tipoPSM: (oggetto SUB "psm_type") tbObjectType: tbObjectType
    SETL position: (oggetto SUB "Position")
    LEO parse: (position) get-tmm-value:x_from_position:"x" get-tmm-value:y_from_position:"y" # Converto X e Y con CMS

    SETL nodo: (map())
    SETL additionalInfo: (map())
    SETL configuration: (map())

    SETL configuration: (oggetto SUB "specification")
    SETL configuration["topicPattern"]: ((oggetto SUB "specification") SUB "topic")

    SETL additionalInfo["description"]: ""
    SETL additionalInfo["layoutX"]: ((CMS x_from_position)*50)
    SETL additionalInfo["layoutY"]: ((CMS y_from_position)*50)

    SETL nodo["configuration"]: (configuration)
    SETL nodo["additionalInfo"]: (additionalInfo)
    SETL nodo["name"]: (oggetto SUB "name")
    SETL nodo["type"]: (tbObjectType)
}

PROCEDURE global GET_CONNECTION fromIndex: string toIndex: string label: string type: string conn: reference {
    SETL conn: (map())
    SETL conn["fromIndex"]: (fromIndex)
    SETL conn["toIndex"]: (toIndex)
    IF(type != "") {
        SETL conn["type"]: (type)
    } ELSE {
        SETL conn["type"]: (label)
    }
}

PROCEDURE global CREATE_RULE_UPLOAD_REQUEST ruleChain: map nodes: array rulechainID: string reqbody: reference {
    SETL reqbody: (ruleChain)
    SETL entity: (map())

    SETL entity["id"]: (rulechainID)
    SETL entity["entityType"]: ("RULE_CHAIN")

    SETL reqbody["ruleChainId"]: (entity)
    SETL reqbody["nodes"]: (nodes)
    SETL reqbody["name"]: ("logic")
    SETL reqbody["type"]: ("CORE")
}


PROCEDURE global CREATE_RULECHAIN_MAP_REQUEST modelname: string reqbody: reference {
    SETL reqbody: (map())
    SETL reqbody["name"]: (modelname)
    SETL reqbody["name"]: (modelname)
}

PROCEDURE global CREATE_UPDATE_REQUEST serviceData: map deviceProfileTbId: string ruleChainTbId: string body: reference {
    SET body: (map())
    SET id: (map())
    SET defaultRuleChainId: (map())
    SET profileData: (map())
    SET transportConfiguration: (map())

    SET id["id"]: (deviceProfileTbId)
    SET id["entityType"]: ("DEVICE_PROFILE")

    SET defaultRuleChainId["id"]: (ruleChainTbId)
    SET defaultRuleChainId["entityType"]: ("RULE_CHAIN")

    SET transportConfiguration["type"]: ("DEFAULT")

    SET profileData["transportConfiguration"]: (transportConfiguration)

    SET body["id"]: (id)
    SET body["defaultRuleChainId"]: (defaultRuleChainId)
    SET body["name"]: (serviceData SUB "name")
    SET body["type"]: ("DEFAULT")
    SET body["transportType"]: (serviceData SUB "protocol")
    SET body["profileData"]: (profileData)
    SET body["description"]: (serviceData SUB "description")
}

