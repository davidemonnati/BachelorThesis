# Questo script ha come responsabilità quella di esportare i modelli ADOxx in Thingsboard.
# L'utente all'interno del modello selezionato, aprendo il sottomenu deploy del menu PSM to code, può scegliere di deployare il
# modello in cui sta lavorando all'interno delle piattaforme Thingsboard e Losant selezionando l'apposita voce. 
# Se l'utente sceglie di caricare il modello su Thingsboard, la procedura che verrà invocata sarà EXPORT_THINGSBOARD, altrimenti
# verrà invocata la procedura EXPORT_LOSANT.

EXECUTE file:("D:\\Universita\\Tesi\\ADOxx\\Script\\ExportLogicThingsBoard.asc")
EXECUTE file:("D:\\Universita\\Tesi\\ADOxx\\Script\\auth.asc")
EXECUTE file:("D:\\Universita\\Tesi\\ADOxx\\Script\\ExportScenarioThingsBoard.asc")

SETG selectedPlatform: ("")
SETG specifications: ("")

PROCEDURE global SELECT_MODEL modelID: reference modelDesign: reference modeltype: reference errcode: reference {
    SETL errcode: (0)
    SETL modelID: ("")
    SEND "GET_ACTIVE_MODEL" to:"Modeling" answer:modelid
    IF (modelid = "") {
        CC "AdoScript" ERRORBOX "Open a model first!"
        SET errcode: (-2)
        EXIT
    }

    SETL modelID: (modelid)

    CC "Core" GET_ATTR_VAL objid:(VAL modelid) attrname:("Model Type") 
    SETL modelDesign: (val)
    CC "Core" GET_ATTR_VAL objid:(VAL modelid) attrname:("Platform")
    SET selectedPlatform: (val)
    GET_SPECIFICATIONS platform: (selectedPlatform) specs: specs
    SET specifications: (specs)
}

# Procedura che avvia il caricamento di un modello selezionato su Thingsboard e in automatico controlla
# se è di tipo IoT Scenario o di tipo IoT Logic, selezionando infine la procedura corretta di esportazione. 
# Inoltre, verifica che il modello sia di tipo PSM e sia stato convertito per thingsboard.
PROCEDURE global EXPORT_THINGSBOARD {
    SELECT_MODEL modelID: modelid modelDesign: modelDesign modeltype: modeltype errcode: errcode
    IF (selectedPlatform != "ThingsBoard") {
        CC "AdoScript" ERRORBOX ("Select a PSM model for Thingsboard") title:("Invalid model")
        EXIT
    }

    CC "Core" GET_MODEL_INFO modelid: (VAL modelid)    
    GET_LOGGED_USER modelid: (VAL modelid) respstat: status errcode: errcode
    IF (errcode = -1) {
        CC "AdoScript" ERRORBOX ("You must enter the url address of the platform") title:("Platform address missing")
    } ELSIF (errcode < -1) {
        EXIT
    }

    IF (status = 200) {
        IF (modelDesign = "PSM") {
            IF (modeltype = "IoT Scenario") {
                SET modelScenarioID: (VAL modelid)
                THINGSBOARD_SCENARIO
            } ELSIF (modeltype = "IoT Logic") {
                SET modelLogicID: (VAL modelid)
                THINGSBOARD_LOGIC
            }
        }
    }
}

# Procedura molto simile a EXPORT_THINGSBOARD con l'unica differenza che questa lavora con la piattaforma Losant.
PROCEDURE global EXPORT_LOSANT {
    SELECT_MODEL modelID: modelid modelDesign: modelDesign modeltype: modeltype errcode: errcode
    IF (selectedPlatform != "Losant") {
        CC "AdoScript" ERRORBOX ("Select a PSM model for Losant") title:("Invalid model")
        EXIT
    }

    CC "Core" GET_MODEL_INFO modelid: (VAL modelid)
    GET_LOGGED_USER modelid: (VAL modelid) respstat: status errcode: errcode
    IF (errcode = -1) {
        CC "AdoScript" ERRORBOX ("You must enter the url address of the platform") title:("Platform address missing")
    } ELSIF (errcode < -1) {
        EXIT
    }

    IF (status = 200) {
        IF (modelDesign = "PSM") {
            IF (modeltype = "IoT Scenario") {
                SET modelScenarioID: (VAL modelid)
                LOSANT_SCENARIO
            } ELSIF (modeltype = "IoT Logic") {
                SET modelLogicID: (VAL modelid)
                LOSANT_FLOW
            }
        }
    }
}
# Converte una lista di elementi array
PROCEDURE global CONVERT_LIST_TOARRAY
    input: string # lista di elementi in formato stringa
    output: reference # array con gli elementi della lista
{
    SET output: ({})
    FOR element in:(input) {
        SET dummy: (aappend(output, element))
    }
}

# Procedura che serve ad inserire un nuovo record all'interno di una tabella
PROCEDURE global ADD_TABLE_RECORD
    objid: integer # ID dell'oggetto in cui si trova la tabella
    classname: string # Nome della classe
    tableName: string # Nome della tabella
    recAttr: string # Nome attributo
    recVal: string # Valore attributo
{
    CC "Core" GET_CLASS_ID classname:(classname) # classid è il valore che ritorna GET_CLASS_ID
    CC "Core" GET_ATTR_ID classid:(classid) attrname:(tableName)
    EMPTY_TABLE attrid: (attrid) objid: (objid) # Elimino tutte le righe della tabella prima di inserire il nuovo id di thingsboard
    CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid) # attrid è il valore che ritorna GET_ATTR_ID clid è il valore che ritorna GET_CLASS_ID 
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:(recAttr) # rowid è il valore che ritorna ADD_REC_ROW
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(recVal) # rowid è il valore che ritorna ADD_REC_ROW
}

# Procedura che serve ad eliminare tutti i record di una tabella
PROCEDURE global EMPTY_TABLE
    attrid: integer # ID attributo
    objid: integer # ID oggetto in cui si trova la tabella da eliminare
{ 
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objid) attrid:(attrid)
    FOR row in:(rowids) {
        CC "Core" REMOVE_REC_ROW objid:(objid) attrid:(attrid) rowid:(VAL row)
    }
}

# Procedura che ritorna gli attributi della tabella platformData.
# Ritorna il valore dell'attributo che corrisponde ad "attribute"
PROCEDURE global GET_RECORD_VALUE objectid: integer attribute: string val: reference {
    CC "Core" GET_CLASS_ID objid:(objectid)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData")
    CC "Core" GET_ATTR_TYPE attrid:(attrid)
    CC "Core" GET_CLASS_NAME classid:(objectid)

    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objectid) attrid:(attrid)
    IF(classname != "attribute") {
        IF(rowids.length > 0) { #IF((rowids.length > 0) AND (classname != "attribute"))
            FOR row in:(rowids) {
                CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Attribute")
                IF(val = attribute) {
                    CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Value") # Ritorna il valore dell'id dell'oggetto 
                }
            }
        } ELSE {
            #CC "AdoScript" ERRORBOX "Nella tabella non sono presenti righe"
        }
    }
}

# Procedura che serve a sostituire le variabili di una path ricavata dal file thingsboard.json con i valori corretti.
# La sostituizione avviene seguendo l'ordine in cui sono stati aggiunti dentro l'array "values".
PROCEDURE global GET_ENDPOINT iType: string operation: string values: array endpoint: reference {
    CC "AdoScript" EDITBOX text:(specifications)
    SETL endpoint: ((((specifications SUB iType) SUB "api") SUB operation) SUB "path")

    SETL start: (0)
    SETL end: (0)
    SETL i: (0)
    
    WHILE (search(endpoint, "[", start) != -1) {
        SETL start: (search(endpoint, "[", start))
        SETL end: (search(endpoint, "]", start))

        SET tmp: (copy(endpoint, 0, start) + values[i] + copy(endpoint, (end+1), -1))

        SETL endpoint: (tmp)
        SETL start: (start+1)
        SETL end: (end+1)
        SETL i: (i+1)
    }
}

