# La responsabilità di questo script è quella di generare un modello importando gli oggetti da thingsboard.
# Ho considerato l'asset come l'oggetto che l'utente può scegliere di importare, quindi la prima operazione che viene
# effettuata è quella di prendere la lista di tutti gli asset da thingsboard e mostrarla all'interno di una LISTBOX,
# dove l'utente può scegliere cosa importare.
# Una volta scelto l'asset da importare lo script si occuperà in automatico di prendere tutti gli oggetti ad esso collegati
# e di inserirli all'interno del modello di tipo scenario.
# Il device profile contiene come attributo l'ID della rule chain e di conseguenza il modello logico verrà importato automaticamente.
# Infine, è compito dell'utente decidere se importare anche la dashboard e nel caso effettuare i collegamenti con gli attributi
# a cui i widget fanno riferimento.

EXECUTE file:("D:\\Universita\\Tesi\\ADOxx\\Script\\auth.asc")
EXECUTE file:("D:\\Universita\\Tesi\\ADOxx\\Script\\ImportRuleChain.asc")

SETG selectedPlatform: ("ThingsBoard")

CC "Core" GET_CLASS_ID classname:("hasAttribute")
SET attributeRelationID: (classid)
CC "Core" GET_CLASS_ID classname:("hasService")
SET serviceRelationID: (classid)
CC "Core" GET_CLASS_ID classname:("hasDevice")
SET deviceRelationID: (classid)
CC "Core" GET_CLASS_ID classname:("hasLocation")
SET locationRelationID: (classid)
CC "Core" GET_CLASS_ID classname:("hasWidget")
SET widgetRelationID: (classid)
CC "Core" GET_CLASS_ID classname:("subsystem")
SET subsystemRelationID: (classid)

IMPORT_FROM_THINGSBOARD

PROCEDURE global IMPORT_FROM_THINGSBOARD {
    SEND "GET_ACTIVE_MODEL" to:"Modeling" answer:modelid
    SETL newModelID: (VAL modelid)

    IF (modelid = "") {
        CC "AdoScript" ERRORBOX "Open a blank model first!"
        EXIT
    } ELSE {
        CC "Core" GET_MODEL_MODELTYPE modelid:(VAL modelid)
        CC "Core" GET_ATTR_VAL objid:(VAL modelid) attrname:("Platform")
        SETL platform: (val)
        CC "Core" GET_ATTR_VAL objid:(VAL modelid) attrname:("Model Type") # val
        IF(val = "PIM" OR modeltype != "IoT Scenario" OR platform != selectedPlatform) {
            CC "AdoScript" ERRORBOX "Select IoT scenario model first!" title:("Invalid model")
            EXIT
        }
    }

    GET_SPECIFICATIONS platform: (selectedPlatform) specs: specs
    SET specifications: (specs)
    
    GET_LOGGED_USER modelid: (newModelID) respstat: status errcode: errocode
    IF (status = 200) {
        CC "AdoScript" MSGWIN ("Get asset list...")
        SET assetListName: ""
        SET assetMap: (map())
        GET_ENDPOINT iType: ("system") operation: ("get_asset_types") values: ({}) endpoint: endpoint method: method
        MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
        FOR i from:0 to:((response.length)-1) {
            GET_ENDPOINT iType: ("system") operation: ("get_assets_of_type") values: ({response[i] SUB "type"}) endpoint: endpoint method: method
            MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: assets respstat: respstat
            SET assetData: (assets SUB "data")
            FOR j from:0 to:((assetData.length)-1) {
                SET assetListName: (assetListName + assetData[j] SUB "name" + ";")
                SET assetMap[assetData[j] SUB "name"]: (assetData[j])
            }
        }
        CC "AdoScript" MSGWIN hide
        CC "AdoScript" LISTBOX  entries: (assetListName)
                toksep:";"
                title:"Select asset do download!"
                oktext:"Download"
                boxtext:"Select asset"
                selection:"Cancel"
        IF (endbutton = "ok") {
            CC "AdoScript" MSGWIN ("Get all objects...")
            GET_SYSTEM selectedAsset: (assetMap SUB selection) assetID: assetID
            CC "AdoScript" MSGWIN hide
            IMPORT_DASHBOARD
            CC "Core" SAVE_MODEL modelid:(newModelID) update-sys-attrs:1
        } ELSIF (endbutton = "cancel") {
            EXIT
        }
        CC "Core" SAVE_MODEL modelid: (newModelID)
    }
}

PROCEDURE global GET_SYSTEM selectedAsset: map assetID: reference {
    SETL id: (selectedAsset SUB "id")
    SET classname: "system"
    SET additionalInfo: (selectedAsset SUB "additionalInfo")
    CC "Core" GET_CLASS_ID classname:(classname)
    CC "Core" CREATE_OBJ modelid:(newModelID) classid:(classid) objname:(selectedAsset SUB "name") # return objid
    SET assetID: (objid)

    CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(selectedAsset SUB "name")
    CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(additionalInfo SUB "description")

    # Save records
    # Get label
    CC "Core" GET_CLASS_ID classname:(classname)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
    CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("label")
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(selectedAsset SUB "label")
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:("String")
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:("Label of the asset")  

    # Get type
    CC "Core" GET_CLASS_ID classname:(classname)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
    CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("type")
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(selectedAsset SUB "type")
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:("String")
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:("Type of the asset")

    # Get Thingsboard id
    CC "Core" GET_CLASS_ID classname:(classname)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData")
    CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("tb_object_id")
    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(id SUB "id")

    # Check attributes
    TB_GET_ATTRIBUTES fromTbId: (id SUB "id") fromAdoxxObjId: (assetID) objType: ("ASSET")
    GET_TELEMETRY fromTbId: (id SUB "id") fromAdoxxObjId: (assetID) objType: ("ASSET")
    IMPORT_LOCATION fromTbId: (id SUB "id") fromAdoxxObjId: (assetID) objType: ("ASSET")

    # Get devices
    GET_RELATION_ENTITY fromEntityType: ("ASSET") tbObjectID: (id SUB "id") toEntityType: ("DEVICE") entities: entities
    GET_CONNECTED_DEVICES deviceIdList: (entities)

    # Prendo i subsystem
    GET_RELATION_ENTITY fromEntityType: ("ASSET") tbObjectID: (id SUB "id") toEntityType: ("ASSET") entities: entities
    SETL subsystems: (entities)
    IF (subsystems.length > 0) {
        FOR i from:0 to:((subsystems.length)-1) {
            GET_ENDPOINT iType: ("system") operation: ("get_asset") values: ({subsystems[i]}) endpoint: endpoint method: method
            MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: child respstat: respstat
            GET_SYSTEM selectedAsset: (child) assetID: childID
            CC "Core" CREATE_CONNECTOR modelid:(newModelID) fromobjid:(assetID) toobjid:(childID) classid:(subsystemRelationID)
        }
    }
}

PROCEDURE global GET_RELATION_ENTITY fromEntityType: string tbObjectID: string toEntityType: string entities: reference {
    SETL entities:({})
    GET_ENDPOINT iType: ("relation") operation: ("get_list_relations") values: ({tbObjectID, fromEntityType}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
    FOR i from:0 to:((response.length)-1) {
        IF(((response[i] SUB "to") SUB "entityType") = toEntityType) {
            SET dummy: (aappend(entities, ((response[i] SUB "to") SUB "id")))
        }
    }
}

PROCEDURE global TB_GET_ATTRIBUTES fromTbId: string fromAdoxxObjId: integer objType: string {
    GET_ENDPOINT iType: ("attribute") operation: ("get_attribute") values: ({objType, fromTbId}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
    FOR i from:0 to:((response.length)-1) {
        SETL value: (response[i] SUB "value")
        SETL key: (response[i] SUB "key")
        IF(key != "latitude" AND key != "longitude") {
            IF (type(value) != "string") {
                GET_PROPERTY key: (response[i] SUB "key") value: (STR (response[i] SUB "value")) attrType: ("Device Attribute") fromAdoxxObjId: (fromAdoxxObjId)
            } ELSE {
                GET_PROPERTY key: (response[i] SUB "key") value: (response[i] SUB "value") attrType: ("Device Attribute") fromAdoxxObjId: (fromAdoxxObjId)
            }
        }
    }
}

PROCEDURE global GET_TELEMETRY fromTbId: string fromAdoxxObjId: integer objType: string {
    GET_ENDPOINT iType: ("attribute") operation: ("get_telemetry") values: ({objType, fromTbId}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
    SET keys: (mapKeysArray(response))
    FOR i from:0 to:((keys.length)-1) {
        SET value: ((response SUB keys[i])[0] SUB "value")
        IF (type(value) != "string") {
            GET_PROPERTY key: (keys[i]) value: (STR(value)) attrType: ("Telemetry") fromAdoxxObjId: (fromAdoxxObjId)
        } ELSE {
            GET_PROPERTY key: (keys[i]) value: (value) attrType: ("Telemetry") fromAdoxxObjId: (fromAdoxxObjId)
        }
    }
}

# Importa la location all'interno di un modello X-IoT, dagli attributi dei device e degli asset vengono presi i valori dalle chiavi
# latitude e longitude, utilizzati per creare oggetti di tipo "location" che hanno come lat la latitudine e come lon la longitudine.
PROCEDURE global IMPORT_LOCATION fromTbId: string fromAdoxxObjId: integer objType: string {
    GET_ENDPOINT iType: ("attribute") operation: ("get_attribute") values: ({objType, fromTbId}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
    SETL classname: ("location")
    SETL location: (map())
    FOR i from:0 to:((response.length)-1) {
        IF (((response[i] SUB "key") = "latitude") OR ((response[i] SUB "key") = "longitude")) {
            SET location[response[i] SUB "key"]: (response[i] SUB "value")
        }
    }
    SET randomNumber: (randomDiscreteUniformDist(1000, 9999))
    CC "Core" GET_CLASS_ID classname:(classname)
    CC "Core" CREATE_OBJ modelid:(newModelID) classid:(classid) objname:("location-" + STR randomNumber)
    CC "Core" SET_ATTR_VAL objid:(objid) attrname:("lat") val:(location SUB "latitude")
    CC "Core" SET_ATTR_VAL objid:(objid) attrname:("lon") val:(location SUB "longitude")
    CC "Core" CREATE_CONNECTOR modelid:(newModelID) fromobjid:(fromAdoxxObjId) toobjid:(objid) classid:(locationRelationID)
}

PROCEDURE global GET_PROPERTY key: string value: string attrType: string fromAdoxxObjId: integer {
    SET classname: "attribute"
    CC "Core" GET_CLASS_ID classname:(classname)
    SET randomNumber: (randomDiscreteUniformDist(1000, 9999))
    SET attrName: (key + "-" + STR randomNumber)
    CC "Core" CREATE_OBJ modelid:(newModelID) classid:(classid) objname:(attrName)
    CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(key)
    CC "Core" SET_ATTR_VAL objid:(objid) attrname:("type") val:(type(value)) # is always string
    CC "Core" SET_ATTR_VAL objid:(objid) attrname:("value") val:(value)
    CC "Core" SET_ATTR_VAL objid:(objid) attrname:("Attribute Type") val:(attrType)
    CC "Core" CREATE_CONNECTOR modelid:(newModelID) fromobjid:(fromAdoxxObjId) toobjid:(objid) classid:(attributeRelationID) 
}

PROCEDURE global GET_CONNECTED_DEVICES deviceIdList: array {
    FOR i from:0 to:((deviceIdList.length)-1) {
        GET_ENDPOINT iType: ("device") operation: ("get_device") values: ({deviceIdList[i]}) endpoint: endpoint method: method
        MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
        SET deviceProfileId: (response SUB "deviceProfileId")

        SET additionalInfo: (response SUB "additionalInfo")
        CC "Core" GET_CLASS_ID classname:("device")
        CC "Core" CREATE_OBJ modelid:(newModelID) classid:(classid) objname:(response SUB "name") # return objid
        SET deviceID: (objid)
        CC "Core" SET_ATTR_VAL objid:(deviceID) attrname:("name") val:(response SUB "name")
        CC "Core" SET_ATTR_VAL objid:(deviceID) attrname:("description") val:(additionalInfo SUB "description")

        # Save records
        # is_gateway
        SET additionalInfo: (response SUB "additionalInfo")
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
        CC "Core" ADD_REC_ROW objid:(deviceID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("is_gateway")
        IF ((additionalInfo SUB "gateway") = 0) {
            CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:("false")
        } ELSE {
            CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:("true")
        }
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:("Boolean")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:("If this device is a gateway")

        # label
        SET additionalInfo: (response SUB "additionalInfo")
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
        CC "Core" ADD_REC_ROW objid:(deviceID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("label")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(response SUB "label")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:("String")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:("Label of the device")

        # Get Thingsboard id
        SETL id: (response SUB "id")
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData")
        CC "Core" ADD_REC_ROW objid:(deviceID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("tb_object_id")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(id SUB "id")

        # Create connector system -> device
        CC "Core" CREATE_CONNECTOR modelid:(newModelID) fromobjid:(assetID) toobjid:(deviceID) classid:(deviceRelationID)

        # Get device profile
        GET_DEVICE_PROFILE deviceProfileId: (deviceProfileId SUB "id") deviceAdoxxId: (deviceID)

        # Get attributes
        TB_GET_ATTRIBUTES fromTbId: (deviceIdList[i]) fromAdoxxObjId: (deviceID) objType: ("DEVICE")
        IMPORT_LOCATION fromTbId: (deviceIdList[i]) fromAdoxxObjId: (deviceID) objType: ("DEVICE")
        GET_TELEMETRY fromTbId: (deviceIdList[i]) fromAdoxxObjId: (deviceID) objType: ("DEVICE")
    }
}

PROCEDURE global GET_DEVICE_PROFILE deviceProfileId: string deviceAdoxxId: integer {
    GET_ENDPOINT iType: ("service") operation: ("get_device_profile") values: ({deviceProfileId}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
    SETL id: (response SUB "id")

    # Before creating check if exist
    CC "Core" GET_CLASS_ID classname:("service")
    CC "Core" GET_OBJ_ID modelid:(newModelID) classid:(classid) objname:(response SUB "name")
    SET serviceID: (objid)

    # Prima di creare il service controllo se già esiste.
    # GET_OBJ_ID ritorna 0 se l'oggetto non esiste, altrimenti ritorna -1.
    IF (serviceID = -1) {
        # Create il service
        CC "Core" GET_CLASS_ID classname:("service")
        CC "Core" CREATE_OBJ modelid:(newModelID) classid:(classid) objname:(response SUB "name") # return objid
        SET serviceID: (objid)
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(response SUB "name")
        CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(response SUB "description")
        SET protocol: (response SUB "transportType")
        IF (protocol != "MQTT") {
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("protocol") val:("DEFAULT")
        } ELSE {
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("protocol") val:("MQTT")
        }

        # Get Thingsboard id
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("platformData")
        CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("tb_object_id")
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Value" val:(id SUB "id")

        # Get and set rule chain
        # Devo controllare se è uguale a map perché nel caso in cui il device profile non ha alcuna rule chain associata,
        # la key defaultRuleChainId del JSON di risposta è uguale a null, quindi di tipo string, altrimenti contiene una map
        # con l'id della rule chain.
        IF(type(response SUB "defaultRuleChainId") = "map") {
            SET ruleChainTbID: ((response SUB "defaultRuleChainId") SUB "id")
            IMPORT_RULE_CHAIN auth: (header SUB "Authorization") rulechainTbID: (ruleChainTbID) serviceID: (serviceID)
        }
    } ELSE {
        # Make only relation
    }
    
    # Create connector device -> service
    CC "Core" CREATE_CONNECTOR modelid:(newModelID) fromobjid:(deviceAdoxxId) toobjid:(serviceID) classid:(serviceRelationID)
}

PROCEDURE global IMPORT_DASHBOARD {
    CC "AdoScript" EDITFIELD caption:("Enter the thingsboard id of dashboard") title:("Import dashboard")

    SET dashboardTbId: (text)
    CC "Core" GET_CLASS_ID classname:("widget")
    IF (type(dashboardTbId) != "undefined") {
        #CC "AdoScript" MSGWIN ("Get dashboard...")
        GET_SPECIFICATIONS platform:("ThingsBoard") specs:specs # Read specification file
        GET_ENDPOINT iType: ("dashboard") operation: ("get_dashboard") values: ({dashboardTbId}) endpoint: endpoint method: method
        MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
        SET widgets: ((response SUB "configuration") SUB "widgets") # prendo i widget dal JSON ricevuto da thingsboard
        SET keysArray: (mapKeysArray(widgets)) # creo array con gli id dei widget
        FOR i from:0 to:((keysArray.length)-1) { # Ogni widget lo creo sul modello adoxx
            SET widget: (widgets SUB keysArray[i])
            SET config: (widget SUB "config")
            CC "Core" CREATE_OBJ modelid:(newModelID) classid:(classid) objname:(config SUB "title")
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(config SUB "title")
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(widget SUB "description")

            CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
            SETL specificationId: (attrid)

            # Aggiungo gli attributi thingsboard del widget sulla tabella specification
            SET tbType:(widget SUB "bundleAlias")
            IF (tbType = "maps_v2") {
                SET psmType: ("map")
                SET widgetSpecs: (((specs SUB "widget")[0] SUB psmType) SUB "specs")
                SET specsArray: (mapKeysArray(widgetSpecs))
                
                FOR j from:0 to:((specsArray.length)-1) {
                    SET keys: (widgetSpecs SUB specsArray[j])
                    CC "Core" ADD_REC_ROW objid:(objid) attrid:(specificationId)
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:(specsArray[j])
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:(keys SUB "type")
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:(keys SUB "description")
                }
            } ELSIF(tbType = "charts") {
                SET psmType: ("line_chart")
                SET widgetSpecs: (((specs SUB "widget")[0] SUB psmType) SUB "specs")
                SET specsArray: (mapKeysArray(widgetSpecs))
                FOR j from:0 to:((specsArray.length)-1) {
                    SET keys: (widgetSpecs SUB specsArray[j])

                    CC "Core" ADD_REC_ROW objid:(objid) attrid:(specificationId)
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:(specsArray[j])
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:(keys SUB "type")
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:(keys SUB "description")
                }
            } ELSE {
                # Se non è ne di tipo maps ne di tipo charts non faccio nulla per ora
            }
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("psm_type") val:(psmType)
        }

        #CC "AdoScript" MSGWIN hide
    } ELSE {
        CC "AdoScript" INFOBOX ("The dashboard will not be imported.")
    }
}


