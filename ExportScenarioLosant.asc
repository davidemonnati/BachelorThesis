PROCEDURE global LOSANT_SCENARIO {
    CREATE_APPLICATION applicationId: applicationId
    CREATE_DEVICES applicationId: (applicationId)
    GET_DASHBOARD applicationId: (applicationId)
    #CC "AdoScript" INFOBOX ("Export successfully completed")
}

PROCEDURE global CREATE_APPLICATION applicationId: reference {
    SETL appName: (modelname)
    CREATE_APPLICATION_REQUEST name: (appName) request: reqbody
    GET_ENDPOINT iType: ("application") operation: ("create_application") values: ({selectedAppID}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: (STR reqbody) reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
    SETL applicationId: (response SUB "applicationId")
}

PROCEDURE global CREATE_DEVICES applicationId: string {
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelScenarioID) classname:("system")
    SET allSystemsID: (objids)

    # Upload systems as gateway
    FOR system in:(allSystemsID) {
        GET_ALL_OBJECT_ATTRIBUTES objectID: (VAL system) objectArray: systemJSON

        CREATE_GATEWAY_REQUEST assetData: (systemJSON) reqbody: reqbody
        LOSANT_GET_ATTRIBUTES objectid: (VAL system) attributes: attributes
        LOSANT_GET_LOCATION objectid: (VAL system) oldAttributes: (attributes) attributes: attributes
        SET reqbody["attributes"]: (attributes)
        GET_ENDPOINT iType: ("devices") operation: ("create_device") values: ({applicationId}) endpoint: endpoint method: method
        MAKE_HTTP_REQUEST path: (endpoint) reqbody: (lam_toJson(reqbody)) reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
        # save object ID
        ADD_TABLE_RECORD objid: (VAL system) classname: (systemJSON SUB "object_class_type") tableName: ("platformData") recAttr: ("losant_object_id") recVal: (response SUB "deviceId")
    }

    # Get all devices
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelScenarioID) classname:("device")
    SET alldevicesID: (objids)
    FOR device in:(alldevicesID) {
        GET_ALL_OBJECT_ATTRIBUTES objectID: (VAL device) objectArray: deviceJSON

        CREATE_DEVICE_REQUEST deviceData: (deviceJSON) reqbody: reqbody
        LOSANT_GET_ATTRIBUTES objectid: (VAL device) attributes: attributes
        LOSANT_GET_LOCATION objectid: (VAL device) oldAttributes: (attributes) attributes: attributes
        CHECK_SYSTEM deviceId: (VAL device) losantSystemId: losantSystemId
        SETL reqbody["attributes"]: (attributes)
        SETL reqbody["parentId"]: (losantSystemId)

        GET_ENDPOINT iType: ("devices") operation: ("create_device") values: ({applicationId}) endpoint: endpoint method: method
        MAKE_HTTP_REQUEST path: (endpoint) reqbody: (lam_toJson(reqbody)) reqHeader: (header) method: (method) mapRespBody: response respstat: respstat

        IF (respstat = 400) {
            CC "AdoScript" ERRORBOX (response SUB "message")
        } ELSE {
            ADD_TABLE_RECORD objid: (VAL device) classname: (deviceJSON SUB "object_class_type") tableName: ("platformData") recAttr: ("losant_object_id") recVal: (response SUB "deviceId")
        }
        LOSANT_GET_SERVICES deviceId: (VAL device)
    }
    LOSANT_SUBSYSTEM_RELATION systemsArray: (allSystemsID) applicationId: (applicationId)
}

# Controllo relazioni di tipo subsytem
PROCEDURE global LOSANT_SUBSYSTEM_RELATION systemsArray: string applicationId: string {
    FOR system in:(systemsArray) {
        CC "Core" EVAL_EXPRESSION (ctobjs(VAL system, "subsystem"))
        GET_RECORD_VALUE objectid: (VAL system) attribute: ("losant_object_id") val: systemLosantID
        IF(result != "") {
            FOR subsystem in:(result) {
                GET_RECORD_VALUE objectid: (VAL subsystem) attribute: ("losant_object_id") val: subSystemLosantID
                SETL request: (map())
                SETL updateFields: (map())
                SETL deviceIds:({})

                SETL updateFields["deviceClass"]: ("system")
                SETL updateFields["parentId"]: (systemLosantID)
                SETL request["updateFields"]: (updateFields)
                SETL dummy: (aappend(deviceIds, subSystemLosantID))

                SETL request["deviceIds"]: (deviceIds)
                GET_ENDPOINT iType: ("device") operation: ("set_child") values: ({applicationId}) endpoint: endpoint method: method
                MAKE_HTTP_REQUEST path: (endpoint) reqbody: (lam_toJson(request)) reqHeader: (header) method: (method) mapRespBody: mapRespBody respstat: respstat
            }
        }
    }
}

PROCEDURE global CHECK_SYSTEM deviceId: integer losantSystemId: reference {
    CC "Core" EVAL_EXPRESSION (cfobjs(deviceId, "hasDevice"))
    IF (result != "") {
        GET_RECORD_VALUE objectid: (VAL result) attribute: ("losant_object_id") val: losantSystemId
    }
}

PROCEDURE global LOSANT_GET_SERVICES deviceId: integer {
    GET_RECORD_VALUE objectid: (deviceId) attribute: ("losant_object_id") val: losantDeviceID

    CC "Core" EVAL_EXPRESSION (ctobjs(deviceId, "hasService"))
    IF (result != "") {
        FOR service in:(result) {
            GET_ALL_OBJECT_ATTRIBUTES objectID: (VAL service) objectArray: serviceJSON
            CREATE_SERVICE_REQUEST serviceJSON: (serviceJSON) deviceID: (losantDeviceID) request: request
            GET_ENDPOINT iType: ("service") operation: ("add_app_key") values: ({applicationId}) endpoint: endpoint method: method
            MAKE_HTTP_REQUEST path: (endpoint) reqbody: (lam_toJson(request)) reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
        }
    }
}

PROCEDURE global LOSANT_GET_ATTRIBUTES objectid: integer attributes: reference {
    SETL attributes: ({})
    CC "Core" EVAL_EXPRESSION (ctobjs(objectid, "hasAttribute"))
    IF(result != "") {
        FOR attribute in:(result) {
            SETL attr: (map())
            GET_ALL_OBJECT_ATTRIBUTES objectID: (VAL attribute) objectArray: attributeData
            IF ((attributeData SUB "type") = "boolean") {
                SETL attrType:("boolean")
            } ELSIF ((attributeData SUB "type") = "string") {
                SETL attrType:("string")
            } ELSIF ((attributeData SUB "type") = "numeric") {
                SETL attrType:("number")
            }
            
            SETL tag: (map())
            SETL tag[attributeData SUB "name"]: (attributeData SUB "value")

            SETL attr["name"]: (attributeData SUB "name")
            SETL attr["dataType"]: (attrType)
            SETL attr["attributeTags"]: (tag)
            SET dummy: (aappend(attributes, attr))
        }
    }
}

PROCEDURE global LOSANT_GET_LOCATION objectid: integer oldAttributes: array attributes: reference {
    SETL attributes: (oldAttributes)
    CC "Core" EVAL_EXPRESSION (ctobjs(objectid, "hasLocation"))
    IF(result != "") {
        SETL attr: (map())
        SETL tags: (map())
        GET_ALL_OBJECT_ATTRIBUTES objectID: (VAL result) objectArray: locationData

        SETL tags["latitude"]: (locationData SUB "lat")
        SETL tags["longitude"]: (locationData SUB "lon")

        SETL attr["name"]: ("location")
        SETL attr["description"]: (locationData SUB "description")
        SETL attr["dataType"]: ("gps")
        SETL attr["attributeTags"]: (tags)
        SETL dummy: (aappend(attributes, attr))
    }
}

PROCEDURE global GET_DASHBOARD applicationId: string {
    SET dashboard:({
        "blocks": {},
        "description": ""
    })
    SET dashboard["name"]: (modelname + "_dashboard")
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelScenarioID) classname:("widget")
    SET height:(0)
    FOR widgetid in:(objids) {
        SET class:(map())
        CLASS_PSM specs:(specifications) objID:(VAL widgetid) class:class
        IF (NOT class.empty) {
            # Get widget's information
            SET widgets:(dashboard["blocks"])
            SET widget:(class["config"])
            SET widget["id"]:(widgetid)
            SET widget["applicationId"]:(applicationId)
            SET widget["startY"]:(height)
            CC "Core" GET_ATTR_VAL objid:(VAL widgetid) attrname:("name")
            SET widget["title"]:(val)
            SET n:(aappend(widgets, widget))
            SET dashboard["blocks"]:(widgets)
            SET height:(height + widget["height"])
        }
    }
    IF (objids != "") {
        GET_ENDPOINT iType: ("dashboard") operation: ("create_dashboard") values: ({selectedAppID}) endpoint: endpoint method: method
        MAKE_HTTP_REQUEST path: (endpoint) reqbody: (lam_toJson(dashboard)) reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
    }
}

PROCEDURE global GET_DEVICES {
    SETL devices: ({})

    # Get all systems and devices
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelScenarioID) classname:("system")
    SET systemids:(objids)
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelScenarioID) classname:("device")
    SET systemids:(systemids + " " + objids)
    SET struct:(map())
    SET resources:({})
    FOR systemid in:(systemids) {
        SET check:(0)
        CC "Core" GET_CONNECTORS objid:(VAL systemid) in
        FOR connid in:(objids) {
            CC "Core" GET_CLASS_ID relation objid:(VAL connid)
            CC "Core" GET_CLASS_NAME classid:(classid)
            IF (classname = "subsystem" OR classname = "hasDevice") {
                SET check:(1)
            }
        }
        IF (check = 0) {
            LOSANT_DEVICES objID:(VAL systemid) struct:struct
            IF (struct.empty = 0) {
                SET n:(aappend(resources, struct))
            }
        }
    }
    SET devices: (resources)
    CC "AdoScript" EDITBOX text: (lam_toJson(devices))
}

PROCEDURE global CREATE_GATEWAY_REQUEST assetData: map reqbody: reference {
    SETL reqbody: (map())
    SETL reqbody["deviceClass"]: ("system")
    SETL reqbody["name"]: (assetData SUB "name")
    SETL reqbody["description"]: (assetData SUB "description")
}

PROCEDURE global CREATE_DEVICE_REQUEST deviceData: map reqbody: reference {
    SETL reqbody: (map())
    SETL reqbody["deviceClass"]: (deviceData SUB "psm_type")
    SETL reqbody["name"]: (deviceData SUB "name")
    SETL reqbody["description"]: (deviceData SUB "description")
}

PROCEDURE global CREATE_APPLICATION_REQUEST name: string request: reference {
    SETL request: (map())
    SETL request["name"]: (name)
}

PROCEDURE global CREATE_SERVICE_REQUEST serviceJSON: map deviceID: string request: reference {
    SETL request: (map())
    SETL pubTopics: ({(serviceJSON SUB "specification") SUB "topic"})
    SETL deviceIds: ({deviceID})
    SETL request["filterType"]: ("whitelist")
    SETL request["description"]: (serviceJSON SUB "description")
    SETL request["pubTopics"]: (pubTopics)
    SETL request["deviceIds"]: (deviceIds)
}

