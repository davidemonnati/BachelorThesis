# Questo script contiene le procedure per la gestione dell'autenticazione e per effettuare richieste GET e POST al server.

SETG url: ("http://localhost:9090")
SETG header:({
    "Content-Type": "application/json"
})
SETL modelid: (-1)

# Procedura che serve a controllare se l'utente è loggato nella piattaforma cloud. Viene preso in input l'id del modello
# su cui si vuole eseguire le operazioni tramite la piattaforma e viene letto l'attributo auth.
# Se auth restituisce una stringa vuota verrà chiesto all'utente di eseguire l'autenticazione, se invece auth contiene il token
# possono verificarsi due condizioni:
#   1) Il token è valido e il server ritorna come messaggio di risposta 200, in questo caso non bisogna fare nulla
#   2) Il token non è più valido e il server ritorna come messaggio di risposta l'errore 401, in questo caso è necessario eseguire
#      nuovamente l'autenticazione
#
# Dopo aver effettuato il controllo e l'autenticazione, il token verrà salvato nella variabile "token" e infine inserito
# nell'header "Authorization" per essere utilizzato nelle richieste GET e POST.
PROCEDURE global GET_LOGGED_USER
    modelid: integer # ID del modello da cui si vuole controllare il token di autenticazione
    respstat: reference # Risposta Thingsboard
{
    SETL modelid: (modelid)
    CC "Core" GET_CLASS_ID classname:("__ModelTypeMetaData__")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("auth")
    CC "Core" GET_ATTR_VAL objid:(modelid) attrid:(attrid)
    SET token: (val)
    SETG header["Authorization"]: ("Bearer " + token)

    IF (token != "") {
        MAKE_GET_REQUEST path: ("api/auth/user") reqHeader: (header) respbodyToMap: response respstat: respstat
        IF (respstat = 401) {
            CC "AdoScript" ERRORBOX ("Please log in again") title:("Session expired") ok
            AUTH token: token
        } ELSE {
        }
    } ELSE {
        CC "AdoScript" INFOBOX ("User not logged on Thingsboard!") title:("Authentication failed")
        AUTH token: token
    }
    SETG header["Authorization"]: ("Bearer " + token) # Update header token
}

# Procedura che permette all'utente di eseguire l'autenticazione su ThingsBoard.
# Viene chiesto all'utente di inserire i dati di accesso (mail e password) tramite due EDITFIELD, i dati verranno successivamente inseriti
# all'interno di una map che servirà ad effettuare la richiesta al server e controllare che siano corretti.
# Nel caso in cui i dati inseriti sono corretti il server restituisce come risposta il codice 200 e il token di autenticazione, altrimenti 
# ritorna l'errore 401. 
# Quando l'autenticazione va a buon fine il token ricevuto verrà salvato all'interno dell'attributo "auth" del modello, in modo che può
# essere utilizzato finché non scade. 
PROCEDURE global AUTH
    token: reference # Ritorna il token di autenticazione generato dal server remoto
{
    SET req: (map())
    CC "AdoScript" EDITFIELD caption:("Enter mail") title:("Login: Mail")
    SET req["username"]: (text)
    CC "AdoScript" EDITFIELD caption:("Enter password") title:("Login: Password")
    SET req["password"]: (text)

    MAKE_POST_REQUEST path: ("api/auth/login") reqHeader: (header) reqbody: (STR req) mapRespBody: response respstat: respstat    

    IF (respstat = 401) {
        CC "AdoScript" ERRORBOX ("Authentication failed!\n\nInvalid username or password.") title:("Authentication failed") ok
        EXIT
    } ELSE {
        SET token: (response SUB "token")
        # Save token into auth attribute
        CC "Core" GET_CLASS_ID classname:("__ModelTypeMetaData__")
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("auth")
        CC "Core" SET_ATTR_VAL objid:(modelid) attrid:(attrid) val:(token)
    }
}

# Effettua una richiesta POST al server e ritorna la risposta in formato JSON
PROCEDURE global MAKE_POST_REQUEST path: string reqHeader: map reqbody: string mapRespBody: reference respstat: reference {
    HTTP_SEND_REQUEST(url + "/" + path) str_method:("POST") map_reqheaders:(reqHeader) str_reqbody:(reqbody) val_respcode:respstat map_respheaders:respheaders str_respbody:respbody
    CC "AdoScript" INFOBOX (respstat)
    SET mapRespBody: (fromJson(respbody))
}

# Effettua una richiesta GET al server e ritorna la risposta in formato JSON
PROCEDURE global MAKE_GET_REQUEST path: string reqHeader: map respbodyToMap: reference respstat: reference {
    HTTP_SEND_REQUEST(url + "/" + path) str_method:("GET") map_reqheaders:(header) str_reqbody:("") val_respcode:respstat map_respheaders:respheaders str_respbody:respbody
    SET respbodyToMap: (fromJson(respbody))
}


